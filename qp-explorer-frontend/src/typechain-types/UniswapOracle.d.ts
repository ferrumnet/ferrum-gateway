/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface UniswapOracleInterface extends ethers.utils.Interface {
  functions: {
    "emaTimes(bytes32)": FunctionFragment;
    "emaX128(address[],uint8)": FunctionFragment;
    "emas(bytes32,uint256)": FunctionFragment;
    "getEmaKey(address,address)": FunctionFragment;
    "rawCumulativePrices(bytes32)": FunctionFragment;
    "recentPriceX128(address[])": FunctionFragment;
    "uniV2Factory()": FunctionFragment;
    "updatePrice(address[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "emaTimes", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "emaX128",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emas",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmaKey",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rawCumulativePrices",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recentPriceX128",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "uniV2Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [string[]]
  ): string;

  decodeFunctionResult(functionFragment: "emaTimes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emaX128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEmaKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawCumulativePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recentPriceX128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniV2Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;

  events: {};
}

export class UniswapOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UniswapOracleInterface;

  functions: {
    emaTimes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, number, number, number] & {
        lastNoPriceFetchTime: number;
        lastCumuPriceFetch: number;
        _1Min: number;
        _1Hour: number;
        _1Day: number;
        _25Day: number;
        _50Day: number;
        _100Day: number;
      }
    >;

    emaX128(
      path: string[],
      emaType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    emas(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEmaKey(
      path0: string,
      path1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rawCumulativePrices(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    recentPriceX128(
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uniV2Factory(overrides?: CallOverrides): Promise<[string]>;

    updatePrice(
      path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  emaTimes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, number, number, number, number] & {
      lastNoPriceFetchTime: number;
      lastCumuPriceFetch: number;
      _1Min: number;
      _1Hour: number;
      _1Day: number;
      _25Day: number;
      _50Day: number;
      _100Day: number;
    }
  >;

  emaX128(
    path: string[],
    emaType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  emas(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEmaKey(
    path0: string,
    path1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  rawCumulativePrices(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  recentPriceX128(
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uniV2Factory(overrides?: CallOverrides): Promise<string>;

  updatePrice(
    path: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    emaTimes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, number, number, number] & {
        lastNoPriceFetchTime: number;
        lastCumuPriceFetch: number;
        _1Min: number;
        _1Hour: number;
        _1Day: number;
        _25Day: number;
        _50Day: number;
        _100Day: number;
      }
    >;

    emaX128(
      path: string[],
      emaType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emas(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmaKey(
      path0: string,
      path1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    rawCumulativePrices(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recentPriceX128(
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniV2Factory(overrides?: CallOverrides): Promise<string>;

    updatePrice(path: string[], overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    emaTimes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    emaX128(
      path: string[],
      emaType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emas(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmaKey(
      path0: string,
      path1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawCumulativePrices(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recentPriceX128(
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniV2Factory(overrides?: CallOverrides): Promise<BigNumber>;

    updatePrice(
      path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    emaTimes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emaX128(
      path: string[],
      emaType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emas(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmaKey(
      path0: string,
      path1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawCumulativePrices(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recentPriceX128(
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniV2Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePrice(
      path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
