/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IQuantumPortalLedgerMgrInterface extends ethers.utils.Interface {
  functions: {
    "registerTransaction(uint64,address,address,address,address,uint256,bytes)": FunctionFragment;
    "state()": FunctionFragment;
    "submitFraudProof(uint64,uint64,uint64,tuple[],bytes32,uint64,bytes,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "registerTransaction",
    values: [
      BigNumberish,
      string,
      string,
      string,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitFraudProof",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      BytesLike,
      BigNumberish,
      BytesLike,
      string
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "registerTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitFraudProof",
    data: BytesLike
  ): Result;

  events: {};
}

export class IQuantumPortalLedgerMgr extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IQuantumPortalLedgerMgrInterface;

  functions: {
    registerTransaction(
      remoteChainId: BigNumberish,
      remoteContract: string,
      msgSender: string,
      beneficiary: string,
      token: string,
      amount: BigNumberish,
      method: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    state(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitFraudProof(
      minedOnChainId: BigNumberish,
      localBlockNonce: BigNumberish,
      localBlockTimestamp: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      rewardReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  registerTransaction(
    remoteChainId: BigNumberish,
    remoteContract: string,
    msgSender: string,
    beneficiary: string,
    token: string,
    amount: BigNumberish,
    method: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  state(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitFraudProof(
    minedOnChainId: BigNumberish,
    localBlockNonce: BigNumberish,
    localBlockTimestamp: BigNumberish,
    transactions: {
      timestamp: BigNumberish;
      remoteContract: string;
      sourceMsgSender: string;
      sourceBeneficiary: string;
      token: string;
      amount: BigNumberish;
      methods: BytesLike[];
      gas: BigNumberish;
      fixedFee: BigNumberish;
    }[],
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    rewardReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    registerTransaction(
      remoteChainId: BigNumberish,
      remoteContract: string,
      msgSender: string,
      beneficiary: string,
      token: string,
      amount: BigNumberish,
      method: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    state(overrides?: CallOverrides): Promise<string>;

    submitFraudProof(
      minedOnChainId: BigNumberish,
      localBlockNonce: BigNumberish,
      localBlockTimestamp: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      rewardReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    registerTransaction(
      remoteChainId: BigNumberish,
      remoteContract: string,
      msgSender: string,
      beneficiary: string,
      token: string,
      amount: BigNumberish,
      method: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    state(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitFraudProof(
      minedOnChainId: BigNumberish,
      localBlockNonce: BigNumberish,
      localBlockTimestamp: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      rewardReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    registerTransaction(
      remoteChainId: BigNumberish,
      remoteContract: string,
      msgSender: string,
      beneficiary: string,
      token: string,
      amount: BigNumberish,
      method: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    state(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitFraudProof(
      minedOnChainId: BigNumberish,
      localBlockNonce: BigNumberish,
      localBlockTimestamp: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      rewardReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
