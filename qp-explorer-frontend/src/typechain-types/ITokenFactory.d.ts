/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ITokenFactoryInterface extends ethers.utils.Interface {
  functions: {
    "btc()": FunctionFragment;
    "feeConvertor()": FunctionFragment;
    "feeStore()": FunctionFragment;
    "feeStoreCollectFee(bytes32)": FunctionFragment;
    "feeStoreSweepToken(address,uint256,address)": FunctionFragment;
    "portal()": FunctionFragment;
    "qpRuneWallet()": FunctionFragment;
    "qpWallet()": FunctionFragment;
    "registration()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "btc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeConvertor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeStoreCollectFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeStoreSweepToken",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "portal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "qpRuneWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "qpWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registration",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "btc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeConvertor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeStoreCollectFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeStoreSweepToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "portal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "qpRuneWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "qpWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registration",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITokenFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITokenFactoryInterface;

  functions: {
    btc(overrides?: CallOverrides): Promise<[string]>;

    feeConvertor(overrides?: CallOverrides): Promise<[string]>;

    feeStore(overrides?: CallOverrides): Promise<[string]>;

    feeStoreCollectFee(
      txId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeStoreSweepToken(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    portal(overrides?: CallOverrides): Promise<[string]>;

    qpRuneWallet(overrides?: CallOverrides): Promise<[string]>;

    qpWallet(overrides?: CallOverrides): Promise<[string]>;

    registration(overrides?: CallOverrides): Promise<[string]>;
  };

  btc(overrides?: CallOverrides): Promise<string>;

  feeConvertor(overrides?: CallOverrides): Promise<string>;

  feeStore(overrides?: CallOverrides): Promise<string>;

  feeStoreCollectFee(
    txId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeStoreSweepToken(
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  portal(overrides?: CallOverrides): Promise<string>;

  qpRuneWallet(overrides?: CallOverrides): Promise<string>;

  qpWallet(overrides?: CallOverrides): Promise<string>;

  registration(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    btc(overrides?: CallOverrides): Promise<string>;

    feeConvertor(overrides?: CallOverrides): Promise<string>;

    feeStore(overrides?: CallOverrides): Promise<string>;

    feeStoreCollectFee(
      txId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeStoreSweepToken(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    portal(overrides?: CallOverrides): Promise<string>;

    qpRuneWallet(overrides?: CallOverrides): Promise<string>;

    qpWallet(overrides?: CallOverrides): Promise<string>;

    registration(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    btc(overrides?: CallOverrides): Promise<BigNumber>;

    feeConvertor(overrides?: CallOverrides): Promise<BigNumber>;

    feeStore(overrides?: CallOverrides): Promise<BigNumber>;

    feeStoreCollectFee(
      txId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeStoreSweepToken(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    portal(overrides?: CallOverrides): Promise<BigNumber>;

    qpRuneWallet(overrides?: CallOverrides): Promise<BigNumber>;

    qpWallet(overrides?: CallOverrides): Promise<BigNumber>;

    registration(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    btc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeConvertor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeStoreCollectFee(
      txId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeStoreSweepToken(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    portal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    qpRuneWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    qpWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registration(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
