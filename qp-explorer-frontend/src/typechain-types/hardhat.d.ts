/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "BeaconProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxy__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "UpgradeableBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableBeacon__factory>;
    getContractFactory(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Utils__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "Create2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Create2__factory>;
    getContractFactory(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSA__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "BatchCall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchCall__factory>;
    getContractFactory(
      name: "Bitcoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bitcoin__factory>;
    getContractFactory(
      name: "FeeStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeStore__factory>;
    getContractFactory(
      name: "IBitcoinIntent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBitcoinIntent__factory>;
    getContractFactory(
      name: "IFeeStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeStore__factory>;
    getContractFactory(
      name: "ITokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenFactory__factory>;
    getContractFactory(
      name: "IWalletRegistration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWalletRegistration__factory>;
    getContractFactory(
      name: "QpErc20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QpErc20Token__factory>;
    getContractFactory(
      name: "DummyERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyERC20__factory>;
    getContractFactory(
      name: "DummyUpgradedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyUpgradedToken__factory>;
    getContractFactory(
      name: "QpMultiSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QpMultiSender__factory>;
    getContractFactory(
      name: "TokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenFactory__factory>;
    getContractFactory(
      name: "ITokenReceivable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenReceivable__factory>;
    getContractFactory(
      name: "TokenReceivableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenReceivableUpgradeable__factory>;
    getContractFactory(
      name: "WalletRegistration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WalletRegistration__factory>;
    getContractFactory(
      name: "FrmFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FrmFeeManager__factory>;
    getContractFactory(
      name: "IFrmFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFrmFeeManager__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "UniswapOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapOracle__factory>;
    getContractFactory(
      name: "PingPong",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PingPong__factory>;
    getContractFactory(
      name: "IQuantumPortalLedgerMgr",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalLedgerMgr__factory>;
    getContractFactory(
      name: "IQuantumPortalLedgerMgrDependencies",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalLedgerMgrDependencies__factory>;
    getContractFactory(
      name: "IQuantumPortalNativeFeeRepo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalNativeFeeRepo__factory>;
    getContractFactory(
      name: "IQuantumPortalPoc",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalPoc__factory>;
    getContractFactory(
      name: "DeployQp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeployQp__factory>;
    getContractFactory(
      name: "IUpdater",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUpdater__factory>;
    getContractFactory(
      name: "QpFeeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QpFeeToken__factory>;
    getContractFactory(
      name: "QpDependenciesDev",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QpDependenciesDev__factory>;
    getContractFactory(
      name: "TokenReceivable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenReceivable__factory>;
    getContractFactory(
      name: "IQuantumPortalAuthorityMgr",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalAuthorityMgr__factory>;
    getContractFactory(
      name: "IQuantumPortalFeeConvertor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalFeeConvertor__factory>;
    getContractFactory(
      name: "IQuantumPortalMinerMembership",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalMinerMembership__factory>;
    getContractFactory(
      name: "IQuantumPortalMinerMgr",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalMinerMgr__factory>;
    getContractFactory(
      name: "IQuantumPortalWorkPoolClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalWorkPoolClient__factory>;
    getContractFactory(
      name: "IQuantumPortalWorkPoolServer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalWorkPoolServer__factory>;
    getContractFactory(
      name: "QuantumPortalFeeConvertorDirect",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalFeeConvertorDirect__factory>;
    getContractFactory(
      name: "IQuantumPortalStakeWithDelegate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalStakeWithDelegate__factory>;
    getContractFactory(
      name: "PortalLedger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PortalLedger__factory>;
    getContractFactory(
      name: "QuantumPortalGatewayDEV",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalGatewayDEV__factory>;
    getContractFactory(
      name: "QuantumPortalLedgerMgr",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalLedgerMgr__factory>;
    getContractFactory(
      name: "QuantumPortalLedgerMgrImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalLedgerMgrImpl__factory>;
    getContractFactory(
      name: "QuantumPortalNativeFeeRepo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalNativeFeeRepo__factory>;
    getContractFactory(
      name: "QuantumPortalPoc",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalPoc__factory>;
    getContractFactory(
      name: "QuantumPortalPocImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalPocImpl__factory>;
    getContractFactory(
      name: "QuantumPortalState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalState__factory>;
    getContractFactory(
      name: "DummyMultiChainApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyMultiChainApp__factory>;
    getContractFactory(
      name: "IDummyMultiChainApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDummyMultiChainApp__factory>;
    getContractFactory(
      name: "EstimateGasExample",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EstimateGasExample__factory>;
    getContractFactory(
      name: "PortalForDebug",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PortalForDebug__factory>;
    getContractFactory(
      name: "QuantumPortalLedgerMgrTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalLedgerMgrTest__factory>;
    getContractFactory(
      name: "QuantumPortalPocTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalPocTest__factory>;
    getContractFactory(
      name: "IQpSelfManagedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQpSelfManagedToken__factory>;
    getContractFactory(
      name: "WithLedgerMgr",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithLedgerMgr__factory>;
    getContractFactory(
      name: "WithQp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithQp__factory>;
    getContractFactory(
      name: "WithRemotePeers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithRemotePeers__factory>;
    getContractFactory(
      name: "DirectMinimalErc20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DirectMinimalErc20__factory>;
    getContractFactory(
      name: "DummyToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyToken__factory>;
    getContractFactory(
      name: "FerrumDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FerrumDeployer__factory>;
    getContractFactory(
      name: "BaseStakingV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseStakingV2__factory>;
    getContractFactory(
      name: "IStakingFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingFactory__factory>;
    getContractFactory(
      name: "IStakingTokenDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingTokenDeployer__factory>;
    getContractFactory(
      name: "StakingFactoryV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingFactoryV2__factory>;
    getContractFactory(
      name: "StakingTokenDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingTokenDeployer__factory>;
    getContractFactory(
      name: "StakingTokenPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingTokenPool__factory>;
    getContractFactory(
      name: "CommonFerrumInitiator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CommonFerrumInitiator__factory>;
    getContractFactory(
      name: "IRewardPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardPool__factory>;
    getContractFactory(
      name: "ISlashableStake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISlashableStake__factory>;
    getContractFactory(
      name: "IStakeInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeInfo__factory>;
    getContractFactory(
      name: "IStakeTransferrer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeTransferrer__factory>;
    getContractFactory(
      name: "IStakeV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeV2__factory>;
    getContractFactory(
      name: "Admined",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Admined__factory>;
    getContractFactory(
      name: "StakingV2CommonSignatures",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingV2CommonSignatures__factory>;
    getContractFactory(
      name: "TokenReceivable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenReceivable__factory>;
    getContractFactory(
      name: "IRemoteStake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRemoteStake__factory>;
    getContractFactory(
      name: "RemoteStakeRewardManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RemoteStakeRewardManager__factory>;
    getContractFactory(
      name: "TestRemoteStakeRewardManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestRemoteStakeRewardManager__factory>;
    getContractFactory(
      name: "StakeOpen",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeOpen__factory>;
    getContractFactory(
      name: "StakeTimed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeTimed__factory>;
    getContractFactory(
      name: "TokenizableStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenizableStaking__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "FerrumDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FerrumDeployer__factory>;
    getContractFactory(
      name: "IFerrumDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFerrumDeployer__factory>;
    getContractFactory(
      name: "IVersioned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVersioned__factory>;
    getContractFactory(
      name: "Sweepable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Sweepable__factory>;
    getContractFactory(
      name: "WithAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithAdmin__factory>;
    getContractFactory(
      name: "DummyToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyToken__factory>;
    getContractFactory(
      name: "DummyTokenOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyTokenOwnable__factory>;
    getContractFactory(
      name: "MultiSigCheckable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSigCheckable__factory>;
    getContractFactory(
      name: "SigCheckable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SigCheckable__factory>;
    getContractFactory(
      name: "IGeneralTaxDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGeneralTaxDistributor__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "DirectMinimalErc20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DirectMinimalErc20__factory>;

    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "IERC5267",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "BeaconProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeaconProxy>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "UpgradeableBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableBeacon>;
    getContractAt(
      name: "ERC1967Utils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Utils>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "Address",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "Create2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Create2>;
    getContractAt(
      name: "ECDSA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSA>;
    getContractAt(
      name: "EIP712",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "Math",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "ShortStrings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "Strings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "BatchCall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BatchCall>;
    getContractAt(
      name: "Bitcoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bitcoin>;
    getContractAt(
      name: "FeeStore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeStore>;
    getContractAt(
      name: "IBitcoinIntent",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBitcoinIntent>;
    getContractAt(
      name: "IFeeStore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeStore>;
    getContractAt(
      name: "ITokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenFactory>;
    getContractAt(
      name: "IWalletRegistration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWalletRegistration>;
    getContractAt(
      name: "QpErc20Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QpErc20Token>;
    getContractAt(
      name: "DummyERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyERC20>;
    getContractAt(
      name: "DummyUpgradedToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyUpgradedToken>;
    getContractAt(
      name: "QpMultiSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QpMultiSender>;
    getContractAt(
      name: "TokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenFactory>;
    getContractAt(
      name: "ITokenReceivable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenReceivable>;
    getContractAt(
      name: "TokenReceivableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenReceivableUpgradeable>;
    getContractAt(
      name: "WalletRegistration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WalletRegistration>;
    getContractAt(
      name: "FrmFeeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FrmFeeManager>;
    getContractAt(
      name: "IFrmFeeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFrmFeeManager>;
    getContractAt(
      name: "IPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "UniswapOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapOracle>;
    getContractAt(
      name: "PingPong",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PingPong>;
    getContractAt(
      name: "IQuantumPortalLedgerMgr",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalLedgerMgr>;
    getContractAt(
      name: "IQuantumPortalLedgerMgrDependencies",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalLedgerMgrDependencies>;
    getContractAt(
      name: "IQuantumPortalNativeFeeRepo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalNativeFeeRepo>;
    getContractAt(
      name: "IQuantumPortalPoc",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalPoc>;
    getContractAt(
      name: "DeployQp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DeployQp>;
    getContractAt(
      name: "IUpdater",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUpdater>;
    getContractAt(
      name: "QpFeeToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QpFeeToken>;
    getContractAt(
      name: "QpDependenciesDev",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QpDependenciesDev>;
    getContractAt(
      name: "TokenReceivable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenReceivable>;
    getContractAt(
      name: "IQuantumPortalAuthorityMgr",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalAuthorityMgr>;
    getContractAt(
      name: "IQuantumPortalFeeConvertor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalFeeConvertor>;
    getContractAt(
      name: "IQuantumPortalMinerMembership",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalMinerMembership>;
    getContractAt(
      name: "IQuantumPortalMinerMgr",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalMinerMgr>;
    getContractAt(
      name: "IQuantumPortalWorkPoolClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalWorkPoolClient>;
    getContractAt(
      name: "IQuantumPortalWorkPoolServer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalWorkPoolServer>;
    getContractAt(
      name: "QuantumPortalFeeConvertorDirect",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalFeeConvertorDirect>;
    getContractAt(
      name: "IQuantumPortalStakeWithDelegate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalStakeWithDelegate>;
    getContractAt(
      name: "PortalLedger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PortalLedger>;
    getContractAt(
      name: "QuantumPortalGatewayDEV",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalGatewayDEV>;
    getContractAt(
      name: "QuantumPortalLedgerMgr",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalLedgerMgr>;
    getContractAt(
      name: "QuantumPortalLedgerMgrImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalLedgerMgrImpl>;
    getContractAt(
      name: "QuantumPortalNativeFeeRepo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalNativeFeeRepo>;
    getContractAt(
      name: "QuantumPortalPoc",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalPoc>;
    getContractAt(
      name: "QuantumPortalPocImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalPocImpl>;
    getContractAt(
      name: "QuantumPortalState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalState>;
    getContractAt(
      name: "DummyMultiChainApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyMultiChainApp>;
    getContractAt(
      name: "IDummyMultiChainApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDummyMultiChainApp>;
    getContractAt(
      name: "EstimateGasExample",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EstimateGasExample>;
    getContractAt(
      name: "PortalForDebug",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PortalForDebug>;
    getContractAt(
      name: "QuantumPortalLedgerMgrTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalLedgerMgrTest>;
    getContractAt(
      name: "QuantumPortalPocTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalPocTest>;
    getContractAt(
      name: "IQpSelfManagedToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQpSelfManagedToken>;
    getContractAt(
      name: "WithLedgerMgr",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WithLedgerMgr>;
    getContractAt(
      name: "WithQp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WithQp>;
    getContractAt(
      name: "WithRemotePeers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WithRemotePeers>;
    getContractAt(
      name: "DirectMinimalErc20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DirectMinimalErc20>;
    getContractAt(
      name: "DummyToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyToken>;
    getContractAt(
      name: "FerrumDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FerrumDeployer>;
    getContractAt(
      name: "BaseStakingV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseStakingV2>;
    getContractAt(
      name: "IStakingFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingFactory>;
    getContractAt(
      name: "IStakingTokenDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingTokenDeployer>;
    getContractAt(
      name: "StakingFactoryV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingFactoryV2>;
    getContractAt(
      name: "StakingTokenDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingTokenDeployer>;
    getContractAt(
      name: "StakingTokenPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingTokenPool>;
    getContractAt(
      name: "CommonFerrumInitiator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CommonFerrumInitiator>;
    getContractAt(
      name: "IRewardPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardPool>;
    getContractAt(
      name: "ISlashableStake",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISlashableStake>;
    getContractAt(
      name: "IStakeInfo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeInfo>;
    getContractAt(
      name: "IStakeTransferrer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeTransferrer>;
    getContractAt(
      name: "IStakeV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeV2>;
    getContractAt(
      name: "Admined",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Admined>;
    getContractAt(
      name: "StakingV2CommonSignatures",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingV2CommonSignatures>;
    getContractAt(
      name: "TokenReceivable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenReceivable>;
    getContractAt(
      name: "IRemoteStake",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRemoteStake>;
    getContractAt(
      name: "RemoteStakeRewardManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RemoteStakeRewardManager>;
    getContractAt(
      name: "TestRemoteStakeRewardManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestRemoteStakeRewardManager>;
    getContractAt(
      name: "StakeOpen",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeOpen>;
    getContractAt(
      name: "StakeTimed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeTimed>;
    getContractAt(
      name: "TokenizableStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenizableStaking>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "FerrumDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FerrumDeployer>;
    getContractAt(
      name: "IFerrumDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFerrumDeployer>;
    getContractAt(
      name: "IVersioned",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVersioned>;
    getContractAt(
      name: "Sweepable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Sweepable>;
    getContractAt(
      name: "WithAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WithAdmin>;
    getContractAt(
      name: "DummyToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyToken>;
    getContractAt(
      name: "DummyTokenOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyTokenOwnable>;
    getContractAt(
      name: "MultiSigCheckable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiSigCheckable>;
    getContractAt(
      name: "SigCheckable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SigCheckable>;
    getContractAt(
      name: "IGeneralTaxDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGeneralTaxDistributor>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "DirectMinimalErc20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DirectMinimalErc20>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
