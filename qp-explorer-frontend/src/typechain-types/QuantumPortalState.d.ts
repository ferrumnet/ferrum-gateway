/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface QuantumPortalStateInterface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "admin()": FunctionFragment;
    "getLastFinalizedBlock(uint256)": FunctionFragment;
    "getLastLocalBlock(uint256)": FunctionFragment;
    "getLastMinedBlock(uint256)": FunctionFragment;
    "getLocalBlockTransaction(uint256,uint256)": FunctionFragment;
    "getLocalBlockTransactionLength(uint256)": FunctionFragment;
    "getLocalBlockTransactions(uint256)": FunctionFragment;
    "getLocalBlocks(uint256)": FunctionFragment;
    "getMinedBlock(uint256)": FunctionFragment;
    "getMinedBlockTransactions(uint256)": FunctionFragment;
    "getRemoteBalances(uint256,address,address)": FunctionFragment;
    "ledger()": FunctionFragment;
    "mgr()": FunctionFragment;
    "owner()": FunctionFragment;
    "pushFinalizationStake(uint256,(address,uint256))": FunctionFragment;
    "pushLocalBlockTransactions(uint256,(uint64,address,address,address,address,uint256,bytes[],uint256,uint256))": FunctionFragment;
    "pushMinedBlockTransactions(uint256,(uint64,address,address,address,address,uint256,bytes[],uint256,uint256))": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setFinalization(uint256,(address,bytes32,bytes32,uint256))": FunctionFragment;
    "setLastFinalizedBlock(uint256,(uint64,uint64,uint64))": FunctionFragment;
    "setLastLocalBlock(uint256,(uint64,uint64,uint64))": FunctionFragment;
    "setLastMinedBlock(uint256,(uint64,uint64,uint64))": FunctionFragment;
    "setLedger(address)": FunctionFragment;
    "setLocalBlocks(uint256,((uint64,uint64,uint64)))": FunctionFragment;
    "setMgr(address)": FunctionFragment;
    "setMinedBlock(uint256,(bytes32,address,uint8,uint256,uint256,(uint64,uint64,uint64)))": FunctionFragment;
    "setMinedBlockAsInvalid(uint256)": FunctionFragment;
    "setRemoteBalances(uint256,address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLastFinalizedBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastLocalBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastMinedBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocalBlockTransaction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocalBlockTransactionLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocalBlockTransactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocalBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinedBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinedBlockTransactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemoteBalances",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "ledger", values?: undefined): string;
  encodeFunctionData(functionFragment: "mgr", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pushFinalizationStake",
    values: [BigNumberish, { finalizer: string; staked: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "pushLocalBlockTransactions",
    values: [
      BigNumberish,
      {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pushMinedBlockTransactions",
    values: [
      BigNumberish,
      {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFinalization",
    values: [
      BigNumberish,
      {
        executor: string;
        finalizedBlocksHash: BytesLike;
        finalizersHash: BytesLike;
        totalBlockStake: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastFinalizedBlock",
    values: [
      BigNumberish,
      { chainId: BigNumberish; nonce: BigNumberish; timestamp: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastLocalBlock",
    values: [
      BigNumberish,
      { chainId: BigNumberish; nonce: BigNumberish; timestamp: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastMinedBlock",
    values: [
      BigNumberish,
      { chainId: BigNumberish; nonce: BigNumberish; timestamp: BigNumberish }
    ]
  ): string;
  encodeFunctionData(functionFragment: "setLedger", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLocalBlocks",
    values: [
      BigNumberish,
      {
        metadata: {
          chainId: BigNumberish;
          nonce: BigNumberish;
          timestamp: BigNumberish;
        };
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "setMgr", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMinedBlock",
    values: [
      BigNumberish,
      {
        blockHash: BytesLike;
        miner: string;
        invalidBlock: BigNumberish;
        stake: BigNumberish;
        totalValue: BigNumberish;
        blockMetadata: {
          chainId: BigNumberish;
          nonce: BigNumberish;
          timestamp: BigNumberish;
        };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinedBlockAsInvalid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRemoteBalances",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastFinalizedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastLocalBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastMinedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLocalBlockTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLocalBlockTransactionLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLocalBlockTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLocalBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinedBlockTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemoteBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mgr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pushFinalizationStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushLocalBlockTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushMinedBlockTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFinalization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastFinalizedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastLocalBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastMinedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLedger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLocalBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMgr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinedBlockAsInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRemoteBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AdminSet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AdminSetEvent = TypedEvent<[string] & { admin: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class QuantumPortalState extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QuantumPortalStateInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    getLastFinalizedBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ]
    >;

    getLastLocalBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ]
    >;

    getLastMinedBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ]
    >;

    getLocalBlockTransaction(
      key: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string[],
          BigNumber,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          methods: string[];
          gas: BigNumber;
          fixedFee: BigNumber;
        }
      ]
    >;

    getLocalBlockTransactionLength(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLocalBlockTransactions(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string[],
          BigNumber,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          methods: string[];
          gas: BigNumber;
          fixedFee: BigNumber;
        })[]
      ] & {
        value: ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string[],
          BigNumber,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          methods: string[];
          gas: BigNumber;
          fixedFee: BigNumber;
        })[];
      }
    >;

    getLocalBlocks(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          }
        ] & {
          metadata: [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          };
        }
      ]
    >;

    getMinedBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          number,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          }
        ] & {
          blockHash: string;
          miner: string;
          invalidBlock: number;
          stake: BigNumber;
          totalValue: BigNumber;
          blockMetadata: [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          };
        }
      ]
    >;

    getMinedBlockTransactions(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string[],
          BigNumber,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          methods: string[];
          gas: BigNumber;
          fixedFee: BigNumber;
        })[]
      ] & {
        value: ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string[],
          BigNumber,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          methods: string[];
          gas: BigNumber;
          fixedFee: BigNumber;
        })[];
      }
    >;

    getRemoteBalances(
      chainId: BigNumberish,
      token: string,
      remoteContract: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ledger(overrides?: CallOverrides): Promise<[string]>;

    mgr(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pushFinalizationStake(
      key: BigNumberish,
      value: { finalizer: string; staked: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushLocalBlockTransactions(
      key: BigNumberish,
      value: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushMinedBlockTransactions(
      key: BigNumberish,
      value: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFinalization(
      key: BigNumberish,
      value: {
        executor: string;
        finalizedBlocksHash: BytesLike;
        finalizersHash: BytesLike;
        totalBlockStake: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLastFinalizedBlock(
      key: BigNumberish,
      value: {
        chainId: BigNumberish;
        nonce: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLastLocalBlock(
      key: BigNumberish,
      value: {
        chainId: BigNumberish;
        nonce: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLastMinedBlock(
      key: BigNumberish,
      value: {
        chainId: BigNumberish;
        nonce: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLedger(
      _ledger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLocalBlocks(
      key: BigNumberish,
      value: {
        metadata: {
          chainId: BigNumberish;
          nonce: BigNumberish;
          timestamp: BigNumberish;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMgr(
      _mgr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinedBlock(
      key: BigNumberish,
      value: {
        blockHash: BytesLike;
        miner: string;
        invalidBlock: BigNumberish;
        stake: BigNumberish;
        totalValue: BigNumberish;
        blockMetadata: {
          chainId: BigNumberish;
          nonce: BigNumberish;
          timestamp: BigNumberish;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinedBlockAsInvalid(
      key: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRemoteBalances(
      chainId: BigNumberish,
      token: string,
      remoteContract: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  getLastFinalizedBlock(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      chainId: BigNumber;
      nonce: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getLastLocalBlock(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      chainId: BigNumber;
      nonce: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getLastMinedBlock(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      chainId: BigNumber;
      nonce: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getLocalBlockTransaction(
    key: BigNumberish,
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      string,
      BigNumber,
      string[],
      BigNumber,
      BigNumber
    ] & {
      timestamp: BigNumber;
      remoteContract: string;
      sourceMsgSender: string;
      sourceBeneficiary: string;
      token: string;
      amount: BigNumber;
      methods: string[];
      gas: BigNumber;
      fixedFee: BigNumber;
    }
  >;

  getLocalBlockTransactionLength(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLocalBlockTransactions(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      string,
      string,
      string,
      BigNumber,
      string[],
      BigNumber,
      BigNumber
    ] & {
      timestamp: BigNumber;
      remoteContract: string;
      sourceMsgSender: string;
      sourceBeneficiary: string;
      token: string;
      amount: BigNumber;
      methods: string[];
      gas: BigNumber;
      fixedFee: BigNumber;
    })[]
  >;

  getLocalBlocks(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    ] & {
      metadata: [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      };
    }
  >;

  getMinedBlock(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    ] & {
      blockHash: string;
      miner: string;
      invalidBlock: number;
      stake: BigNumber;
      totalValue: BigNumber;
      blockMetadata: [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      };
    }
  >;

  getMinedBlockTransactions(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      string,
      string,
      string,
      BigNumber,
      string[],
      BigNumber,
      BigNumber
    ] & {
      timestamp: BigNumber;
      remoteContract: string;
      sourceMsgSender: string;
      sourceBeneficiary: string;
      token: string;
      amount: BigNumber;
      methods: string[];
      gas: BigNumber;
      fixedFee: BigNumber;
    })[]
  >;

  getRemoteBalances(
    chainId: BigNumberish,
    token: string,
    remoteContract: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ledger(overrides?: CallOverrides): Promise<string>;

  mgr(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pushFinalizationStake(
    key: BigNumberish,
    value: { finalizer: string; staked: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushLocalBlockTransactions(
    key: BigNumberish,
    value: {
      timestamp: BigNumberish;
      remoteContract: string;
      sourceMsgSender: string;
      sourceBeneficiary: string;
      token: string;
      amount: BigNumberish;
      methods: BytesLike[];
      gas: BigNumberish;
      fixedFee: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushMinedBlockTransactions(
    key: BigNumberish,
    value: {
      timestamp: BigNumberish;
      remoteContract: string;
      sourceMsgSender: string;
      sourceBeneficiary: string;
      token: string;
      amount: BigNumberish;
      methods: BytesLike[];
      gas: BigNumberish;
      fixedFee: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFinalization(
    key: BigNumberish,
    value: {
      executor: string;
      finalizedBlocksHash: BytesLike;
      finalizersHash: BytesLike;
      totalBlockStake: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLastFinalizedBlock(
    key: BigNumberish,
    value: {
      chainId: BigNumberish;
      nonce: BigNumberish;
      timestamp: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLastLocalBlock(
    key: BigNumberish,
    value: {
      chainId: BigNumberish;
      nonce: BigNumberish;
      timestamp: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLastMinedBlock(
    key: BigNumberish,
    value: {
      chainId: BigNumberish;
      nonce: BigNumberish;
      timestamp: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLedger(
    _ledger: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLocalBlocks(
    key: BigNumberish,
    value: {
      metadata: {
        chainId: BigNumberish;
        nonce: BigNumberish;
        timestamp: BigNumberish;
      };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMgr(
    _mgr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinedBlock(
    key: BigNumberish,
    value: {
      blockHash: BytesLike;
      miner: string;
      invalidBlock: BigNumberish;
      stake: BigNumberish;
      totalValue: BigNumberish;
      blockMetadata: {
        chainId: BigNumberish;
        nonce: BigNumberish;
        timestamp: BigNumberish;
      };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinedBlockAsInvalid(
    key: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRemoteBalances(
    chainId: BigNumberish,
    token: string,
    remoteContract: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    getLastFinalizedBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getLastLocalBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getLastMinedBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getLocalBlockTransaction(
      key: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string[],
        BigNumber,
        BigNumber
      ] & {
        timestamp: BigNumber;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumber;
        methods: string[];
        gas: BigNumber;
        fixedFee: BigNumber;
      }
    >;

    getLocalBlockTransactionLength(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLocalBlockTransactions(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string[],
        BigNumber,
        BigNumber
      ] & {
        timestamp: BigNumber;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumber;
        methods: string[];
        gas: BigNumber;
        fixedFee: BigNumber;
      })[]
    >;

    getLocalBlocks(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        metadata: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      }
    >;

    getMinedBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        blockHash: string;
        miner: string;
        invalidBlock: number;
        stake: BigNumber;
        totalValue: BigNumber;
        blockMetadata: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      }
    >;

    getMinedBlockTransactions(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string[],
        BigNumber,
        BigNumber
      ] & {
        timestamp: BigNumber;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumber;
        methods: string[];
        gas: BigNumber;
        fixedFee: BigNumber;
      })[]
    >;

    getRemoteBalances(
      chainId: BigNumberish,
      token: string,
      remoteContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ledger(overrides?: CallOverrides): Promise<string>;

    mgr(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pushFinalizationStake(
      key: BigNumberish,
      value: { finalizer: string; staked: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    pushLocalBlockTransactions(
      key: BigNumberish,
      value: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    pushMinedBlockTransactions(
      key: BigNumberish,
      value: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setFinalization(
      key: BigNumberish,
      value: {
        executor: string;
        finalizedBlocksHash: BytesLike;
        finalizersHash: BytesLike;
        totalBlockStake: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setLastFinalizedBlock(
      key: BigNumberish,
      value: {
        chainId: BigNumberish;
        nonce: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setLastLocalBlock(
      key: BigNumberish,
      value: {
        chainId: BigNumberish;
        nonce: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setLastMinedBlock(
      key: BigNumberish,
      value: {
        chainId: BigNumberish;
        nonce: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setLedger(_ledger: string, overrides?: CallOverrides): Promise<void>;

    setLocalBlocks(
      key: BigNumberish,
      value: {
        metadata: {
          chainId: BigNumberish;
          nonce: BigNumberish;
          timestamp: BigNumberish;
        };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setMgr(_mgr: string, overrides?: CallOverrides): Promise<void>;

    setMinedBlock(
      key: BigNumberish,
      value: {
        blockHash: BytesLike;
        miner: string;
        invalidBlock: BigNumberish;
        stake: BigNumberish;
        totalValue: BigNumberish;
        blockMetadata: {
          chainId: BigNumberish;
          nonce: BigNumberish;
          timestamp: BigNumberish;
        };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setMinedBlockAsInvalid(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRemoteBalances(
      chainId: BigNumberish,
      token: string,
      remoteContract: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminSet(address)"(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    AdminSet(admin?: null): TypedEventFilter<[string], { admin: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    getLastFinalizedBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastLocalBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastMinedBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLocalBlockTransaction(
      key: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLocalBlockTransactionLength(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLocalBlockTransactions(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLocalBlocks(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinedBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinedBlockTransactions(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemoteBalances(
      chainId: BigNumberish,
      token: string,
      remoteContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ledger(overrides?: CallOverrides): Promise<BigNumber>;

    mgr(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pushFinalizationStake(
      key: BigNumberish,
      value: { finalizer: string; staked: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushLocalBlockTransactions(
      key: BigNumberish,
      value: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushMinedBlockTransactions(
      key: BigNumberish,
      value: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFinalization(
      key: BigNumberish,
      value: {
        executor: string;
        finalizedBlocksHash: BytesLike;
        finalizersHash: BytesLike;
        totalBlockStake: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLastFinalizedBlock(
      key: BigNumberish,
      value: {
        chainId: BigNumberish;
        nonce: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLastLocalBlock(
      key: BigNumberish,
      value: {
        chainId: BigNumberish;
        nonce: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLastMinedBlock(
      key: BigNumberish,
      value: {
        chainId: BigNumberish;
        nonce: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLedger(
      _ledger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLocalBlocks(
      key: BigNumberish,
      value: {
        metadata: {
          chainId: BigNumberish;
          nonce: BigNumberish;
          timestamp: BigNumberish;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMgr(
      _mgr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinedBlock(
      key: BigNumberish,
      value: {
        blockHash: BytesLike;
        miner: string;
        invalidBlock: BigNumberish;
        stake: BigNumberish;
        totalValue: BigNumberish;
        blockMetadata: {
          chainId: BigNumberish;
          nonce: BigNumberish;
          timestamp: BigNumberish;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinedBlockAsInvalid(
      key: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRemoteBalances(
      chainId: BigNumberish,
      token: string,
      remoteContract: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastFinalizedBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastLocalBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastMinedBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLocalBlockTransaction(
      key: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLocalBlockTransactionLength(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLocalBlockTransactions(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLocalBlocks(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinedBlock(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinedBlockTransactions(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemoteBalances(
      chainId: BigNumberish,
      token: string,
      remoteContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ledger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mgr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pushFinalizationStake(
      key: BigNumberish,
      value: { finalizer: string; staked: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushLocalBlockTransactions(
      key: BigNumberish,
      value: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushMinedBlockTransactions(
      key: BigNumberish,
      value: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFinalization(
      key: BigNumberish,
      value: {
        executor: string;
        finalizedBlocksHash: BytesLike;
        finalizersHash: BytesLike;
        totalBlockStake: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLastFinalizedBlock(
      key: BigNumberish,
      value: {
        chainId: BigNumberish;
        nonce: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLastLocalBlock(
      key: BigNumberish,
      value: {
        chainId: BigNumberish;
        nonce: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLastMinedBlock(
      key: BigNumberish,
      value: {
        chainId: BigNumberish;
        nonce: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLedger(
      _ledger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLocalBlocks(
      key: BigNumberish,
      value: {
        metadata: {
          chainId: BigNumberish;
          nonce: BigNumberish;
          timestamp: BigNumberish;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMgr(
      _mgr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinedBlock(
      key: BigNumberish,
      value: {
        blockHash: BytesLike;
        miner: string;
        invalidBlock: BigNumberish;
        stake: BigNumberish;
        totalValue: BigNumberish;
        blockMetadata: {
          chainId: BigNumberish;
          nonce: BigNumberish;
          timestamp: BigNumberish;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinedBlockAsInvalid(
      key: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRemoteBalances(
      chainId: BigNumberish,
      token: string,
      remoteContract: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
