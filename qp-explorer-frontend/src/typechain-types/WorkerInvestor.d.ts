/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface WorkerInvestorInterface extends ethers.utils.Interface {
  functions: {
    "assignWorker(address)": FunctionFragment;
    "getInvestor(address)": FunctionFragment;
    "investorLookup(address)": FunctionFragment;
    "worker(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assignWorker",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getInvestor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "investorLookup",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "worker", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "assignWorker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "worker", data: BytesLike): Result;

  events: {
    "WorkerInvestorAssigned(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WorkerInvestorAssigned"): EventFragment;
}

export type WorkerInvestorAssignedEvent = TypedEvent<
  [string, string] & { investor: string; worker: string }
>;

export class WorkerInvestor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WorkerInvestorInterface;

  functions: {
    assignWorker(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInvestor(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[[string, number] & { investor: string; deleted: number }]>;

    investorLookup(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, number] & { investor: string; deleted: number }>;

    worker(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  assignWorker(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInvestor(
    workerAddress: string,
    overrides?: CallOverrides
  ): Promise<[string, number] & { investor: string; deleted: number }>;

  investorLookup(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, number] & { investor: string; deleted: number }>;

  worker(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    assignWorker(to: string, overrides?: CallOverrides): Promise<void>;

    getInvestor(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[string, number] & { investor: string; deleted: number }>;

    investorLookup(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, number] & { investor: string; deleted: number }>;

    worker(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "WorkerInvestorAssigned(address,address)"(
      investor?: null,
      worker?: null
    ): TypedEventFilter<[string, string], { investor: string; worker: string }>;

    WorkerInvestorAssigned(
      investor?: null,
      worker?: null
    ): TypedEventFilter<[string, string], { investor: string; worker: string }>;
  };

  estimateGas: {
    assignWorker(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInvestor(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investorLookup(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    worker(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    assignWorker(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInvestor(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investorLookup(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    worker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
