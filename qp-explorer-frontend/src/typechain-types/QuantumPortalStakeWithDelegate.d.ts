/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface QuantumPortalStakeWithDelegateInterface
  extends ethers.utils.Interface {
  functions: {
    "STAKE_ID()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "addMarginalReward(address)": FunctionFragment;
    "addMarginalRewardToPool(address,address)": FunctionFragment;
    "admins(address,address)": FunctionFragment;
    "allowedRewardTokenList(address)": FunctionFragment;
    "allowedRewardTokens(address,address)": FunctionFragment;
    "assignOperator(address)": FunctionFragment;
    "auth()": FunctionFragment;
    "baseToken(address)": FunctionFragment;
    "creationSigner()": FunctionFragment;
    "delegateLookup(address)": FunctionFragment;
    "delegateSlash(address)": FunctionFragment;
    "delegateStake(address)": FunctionFragment;
    "delegations(address)": FunctionFragment;
    "eip712Domain()": FunctionFragment;
    "factory()": FunctionFragment;
    "fakeRewardOf(address,address,address)": FunctionFragment;
    "fakeRewardsTotal(address,address)": FunctionFragment;
    "freezeSweep()": FunctionFragment;
    "gateway()": FunctionFragment;
    "getDelegateForOperator(address)": FunctionFragment;
    "init(address,string,address[])": FunctionFragment;
    "initDefault(address)": FunctionFragment;
    "inventory(address)": FunctionFragment;
    "isTokenizable(address)": FunctionFragment;
    "lockSeconds(address)": FunctionFragment;
    "name(address)": FunctionFragment;
    "nodeOperator(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "releaseWithdrawItems(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardOf(address,address,address[])": FunctionFragment;
    "rewardsTotal(address,address)": FunctionFragment;
    "setAdmin(address,address,uint8)": FunctionFragment;
    "setCreationSigner(address)": FunctionFragment;
    "setDelegation(address,address)": FunctionFragment;
    "setLockSeconds(address,uint256)": FunctionFragment;
    "slashDelegate(address,uint256,bytes32,uint64,bytes)": FunctionFragment;
    "slashTarget()": FunctionFragment;
    "stake(address,address)": FunctionFragment;
    "stakeFor(address,address)": FunctionFragment;
    "stakeOf(address,address)": FunctionFragment;
    "stakeOfDelegate(address)": FunctionFragment;
    "stakeToDelegate(address,address)": FunctionFragment;
    "stakeToDelegateWithAllocation(address,address,uint256,bytes32,uint64,bytes)": FunctionFragment;
    "stakeVerifyer()": FunctionFragment;
    "stakeWithAllocation(address,address,uint256,bytes32,bytes)": FunctionFragment;
    "stakedBalance(address)": FunctionFragment;
    "stakings(address)": FunctionFragment;
    "sweepBase(address)": FunctionFragment;
    "sweepFrozen()": FunctionFragment;
    "sweepRewards(address,address[])": FunctionFragment;
    "sweepToken(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateStakeVerifyer(address)": FunctionFragment;
    "usedHashes(bytes32)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
    "withdrawItemsQueue(address,uint256)": FunctionFragment;
    "withdrawItemsQueueParam(address)": FunctionFragment;
    "withdrawRewards(address,address)": FunctionFragment;
    "withdrawTimeOf(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "STAKE_ID", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addMarginalReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addMarginalRewardToPool",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "admins",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedRewardTokenList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedRewardTokens",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "assignOperator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "auth", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "creationSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegateLookup",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateSlash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateStake",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "delegations", values: [string]): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fakeRewardOf",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fakeRewardsTotal",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeSweep",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDelegateForOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "initDefault", values: [string]): string;
  encodeFunctionData(functionFragment: "inventory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTokenizable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lockSeconds", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values: [string]): string;
  encodeFunctionData(
    functionFragment: "nodeOperator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseWithdrawItems",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardOf",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsTotal",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreationSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegation",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockSeconds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slashDelegate",
    values: [string, BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slashTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOfDelegate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToDelegate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToDelegateWithAllocation",
    values: [string, string, BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeVerifyer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeWithAllocation",
    values: [string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stakings", values: [string]): string;
  encodeFunctionData(functionFragment: "sweepBase", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sweepFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweepRewards",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakeVerifyer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usedHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawItemsQueue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawItemsQueueParam",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTimeOf",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "STAKE_ID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addMarginalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMarginalRewardToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedRewardTokenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creationSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateSlash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fakeRewardOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fakeRewardsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeSweep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDelegateForOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inventory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenizable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nodeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseWithdrawItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCreationSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeOfDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeToDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeToDelegateWithAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeVerifyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeWithAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStakeVerifyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawItemsQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawItemsQueueParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTimeOf",
    data: BytesLike
  ): Result;

  events: {
    "BasePaid(address,address,address,address,uint256)": EventFragment;
    "EIP712DomainChanged()": EventFragment;
    "NodeOperatorAssigned(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardAdded(address,address,uint256)": EventFragment;
    "RewardPaid(address,address,address,address[],uint256[])": EventFragment;
    "Staked(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BasePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeOperatorAssigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
}

export type BasePaidEvent = TypedEvent<
  [string, string, string, string, BigNumber] & {
    id: string;
    staker: string;
    to: string;
    token: string;
    amountPaid: BigNumber;
  }
>;

export type EIP712DomainChangedEvent = TypedEvent<[] & {}>;

export type NodeOperatorAssignedEvent = TypedEvent<
  [string, string] & { delegate: string; nodeOperator: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RewardAddedEvent = TypedEvent<
  [string, string, BigNumber] & {
    id: string;
    rewardToken: string;
    rewardAmount: BigNumber;
  }
>;

export type RewardPaidEvent = TypedEvent<
  [string, string, string, string[], BigNumber[]] & {
    id: string;
    staker: string;
    to: string;
    rewardTokens: string[];
    rewards: BigNumber[];
  }
>;

export type StakedEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    id: string;
    tokenAddress: string;
    staker: string;
    amount: BigNumber;
  }
>;

export class QuantumPortalStakeWithDelegate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QuantumPortalStakeWithDelegateInterface;

  functions: {
    STAKE_ID(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    addMarginalReward(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMarginalRewardToPool(
      id: string,
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admins(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    allowedRewardTokenList(
      id: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    allowedRewardTokens(
      id: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    assignOperator(
      toOp: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auth(overrides?: CallOverrides): Promise<[string]>;

    baseToken(id: string, overrides?: CallOverrides): Promise<[string]>;

    creationSigner(overrides?: CallOverrides): Promise<[string]>;

    delegateLookup(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, number] & { delegate: string; deleted: number }>;

    delegateSlash(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delegateStake(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delegations(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    factory(overrides?: CallOverrides): Promise<[string]>;

    fakeRewardOf(
      id: string,
      staker: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fakeRewardsTotal(
      id: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    freezeSweep(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gateway(overrides?: CallOverrides): Promise<[string]>;

    getDelegateForOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[[string, number] & { delegate: string; deleted: number }]>;

    init(
      token: string,
      _name: string,
      rewardTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initDefault(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    inventory(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    isTokenizable(id: string, overrides?: CallOverrides): Promise<[boolean]>;

    lockSeconds(id: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    name(
      id: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _name: string }>;

    nodeOperator(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    releaseWithdrawItems(
      staker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardOf(
      id: string,
      staker: string,
      rewardTokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    rewardsTotal(
      id: string,
      rewardAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAdmin(
      id: string,
      admin: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreationSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDelegation(
      delegate: string,
      delegator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockSeconds(
      id: string,
      _lockSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashDelegate(
      delegate: string,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashTarget(overrides?: CallOverrides): Promise<[string]>;

    stake(
      to: string,
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeFor(
      to: string,
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeOf(
      id: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakeOfDelegate(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakeToDelegate(
      to: string,
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeToDelegateWithAllocation(
      to: string,
      delegate: string,
      allocation: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeVerifyer(overrides?: CallOverrides): Promise<[string]>;

    stakeWithAllocation(
      staker: string,
      id: string,
      allocation: BigNumberish,
      salt: BytesLike,
      allocatorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedBalance(id: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    stakings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, number, number, number, number, number] & {
        stakeType: number;
        restrictedRewards: boolean;
        contribStart: number;
        contribEnd: number;
        endOfLife: number;
        configHardCutOff: number;
        flags: number;
      }
    >;

    sweepBase(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepFrozen(overrides?: CallOverrides): Promise<[boolean]>;

    sweepRewards(
      id: string,
      rewardTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepToken(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStakeVerifyer(
      newStakeVerifyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      to: string,
      id: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawItemsQueue(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        opensAt: BigNumber;
        amount: BigNumber;
        to: string;
      }
    >;

    withdrawItemsQueueParam(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    withdrawRewards(
      to: string,
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTimeOf(
      id: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  STAKE_ID(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  addMarginalReward(
    rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMarginalRewardToPool(
    id: string,
    rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admins(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  allowedRewardTokenList(
    id: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  allowedRewardTokens(
    id: string,
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  assignOperator(
    toOp: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auth(overrides?: CallOverrides): Promise<string>;

  baseToken(id: string, overrides?: CallOverrides): Promise<string>;

  creationSigner(overrides?: CallOverrides): Promise<string>;

  delegateLookup(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, number] & { delegate: string; deleted: number }>;

  delegateSlash(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  delegateStake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  delegations(arg0: string, overrides?: CallOverrides): Promise<string>;

  eip712Domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  factory(overrides?: CallOverrides): Promise<string>;

  fakeRewardOf(
    id: string,
    staker: string,
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fakeRewardsTotal(
    id: string,
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  freezeSweep(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gateway(overrides?: CallOverrides): Promise<string>;

  getDelegateForOperator(
    operator: string,
    overrides?: CallOverrides
  ): Promise<[string, number] & { delegate: string; deleted: number }>;

  init(
    token: string,
    _name: string,
    rewardTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initDefault(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  inventory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  isTokenizable(id: string, overrides?: CallOverrides): Promise<boolean>;

  lockSeconds(id: string, overrides?: CallOverrides): Promise<BigNumber>;

  name(id: string, overrides?: CallOverrides): Promise<string>;

  nodeOperator(arg0: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  releaseWithdrawItems(
    staker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardOf(
    id: string,
    staker: string,
    rewardTokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  rewardsTotal(
    id: string,
    rewardAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAdmin(
    id: string,
    admin: string,
    role: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreationSigner(
    _signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDelegation(
    delegate: string,
    delegator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockSeconds(
    id: string,
    _lockSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashDelegate(
    delegate: string,
    amount: BigNumberish,
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashTarget(overrides?: CallOverrides): Promise<string>;

  stake(
    to: string,
    id: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeFor(
    to: string,
    id: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeOf(
    id: string,
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakeOfDelegate(
    operator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakeToDelegate(
    to: string,
    delegate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeToDelegateWithAllocation(
    to: string,
    delegate: string,
    allocation: BigNumberish,
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeVerifyer(overrides?: CallOverrides): Promise<string>;

  stakeWithAllocation(
    staker: string,
    id: string,
    allocation: BigNumberish,
    salt: BytesLike,
    allocatorSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedBalance(id: string, overrides?: CallOverrides): Promise<BigNumber>;

  stakings(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, number, number, number, number, number] & {
      stakeType: number;
      restrictedRewards: boolean;
      contribStart: number;
      contribEnd: number;
      endOfLife: number;
      configHardCutOff: number;
      flags: number;
    }
  >;

  sweepBase(
    id: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepFrozen(overrides?: CallOverrides): Promise<boolean>;

  sweepRewards(
    id: string,
    rewardTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepToken(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStakeVerifyer(
    newStakeVerifyer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    to: string,
    id: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawItemsQueue(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      opensAt: BigNumber;
      amount: BigNumber;
      to: string;
    }
  >;

  withdrawItemsQueueParam(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

  withdrawRewards(
    to: string,
    id: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTimeOf(
    id: string,
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    STAKE_ID(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    addMarginalReward(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addMarginalRewardToPool(
      id: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admins(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;

    allowedRewardTokenList(
      id: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    allowedRewardTokens(
      id: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assignOperator(toOp: string, overrides?: CallOverrides): Promise<void>;

    auth(overrides?: CallOverrides): Promise<string>;

    baseToken(id: string, overrides?: CallOverrides): Promise<string>;

    creationSigner(overrides?: CallOverrides): Promise<string>;

    delegateLookup(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, number] & { delegate: string; deleted: number }>;

    delegateSlash(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegateStake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegations(arg0: string, overrides?: CallOverrides): Promise<string>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    factory(overrides?: CallOverrides): Promise<string>;

    fakeRewardOf(
      id: string,
      staker: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fakeRewardsTotal(
      id: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freezeSweep(overrides?: CallOverrides): Promise<void>;

    gateway(overrides?: CallOverrides): Promise<string>;

    getDelegateForOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[string, number] & { delegate: string; deleted: number }>;

    init(
      token: string,
      _name: string,
      rewardTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    initDefault(token: string, overrides?: CallOverrides): Promise<void>;

    inventory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTokenizable(id: string, overrides?: CallOverrides): Promise<boolean>;

    lockSeconds(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(id: string, overrides?: CallOverrides): Promise<string>;

    nodeOperator(arg0: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    releaseWithdrawItems(
      staker: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { paidTo: string[]; amounts: BigNumber[] }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardOf(
      id: string,
      staker: string,
      rewardTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    rewardsTotal(
      id: string,
      rewardAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      id: string,
      admin: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreationSigner(
      _signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegation(
      delegate: string,
      delegator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockSeconds(
      id: string,
      _lockSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slashDelegate(
      delegate: string,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slashTarget(overrides?: CallOverrides): Promise<string>;

    stake(
      to: string,
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeFor(
      to: string,
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeOf(
      id: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeOfDelegate(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeToDelegate(
      to: string,
      delegate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeToDelegateWithAllocation(
      to: string,
      delegate: string,
      allocation: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeVerifyer(overrides?: CallOverrides): Promise<string>;

    stakeWithAllocation(
      staker: string,
      id: string,
      allocation: BigNumberish,
      salt: BytesLike,
      allocatorSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedBalance(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, number, number, number, number, number] & {
        stakeType: number;
        restrictedRewards: boolean;
        contribStart: number;
        contribEnd: number;
        endOfLife: number;
        configHardCutOff: number;
        flags: number;
      }
    >;

    sweepBase(id: string, overrides?: CallOverrides): Promise<void>;

    sweepFrozen(overrides?: CallOverrides): Promise<boolean>;

    sweepRewards(
      id: string,
      rewardTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    sweepToken(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStakeVerifyer(
      newStakeVerifyer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    withdraw(
      to: string,
      id: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawItemsQueue(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        opensAt: BigNumber;
        amount: BigNumber;
        to: string;
      }
    >;

    withdrawItemsQueueParam(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    withdrawRewards(
      to: string,
      id: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTimeOf(
      id: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BasePaid(address,address,address,address,uint256)"(
      id?: null,
      staker?: null,
      to?: null,
      token?: null,
      amountPaid?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        id: string;
        staker: string;
        to: string;
        token: string;
        amountPaid: BigNumber;
      }
    >;

    BasePaid(
      id?: null,
      staker?: null,
      to?: null,
      token?: null,
      amountPaid?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        id: string;
        staker: string;
        to: string;
        token: string;
        amountPaid: BigNumber;
      }
    >;

    "EIP712DomainChanged()"(): TypedEventFilter<[], {}>;

    EIP712DomainChanged(): TypedEventFilter<[], {}>;

    "NodeOperatorAssigned(address,address)"(
      delegate?: null,
      nodeOperator?: null
    ): TypedEventFilter<
      [string, string],
      { delegate: string; nodeOperator: string }
    >;

    NodeOperatorAssigned(
      delegate?: null,
      nodeOperator?: null
    ): TypedEventFilter<
      [string, string],
      { delegate: string; nodeOperator: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RewardAdded(address,address,uint256)"(
      id?: null,
      rewardToken?: null,
      rewardAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { id: string; rewardToken: string; rewardAmount: BigNumber }
    >;

    RewardAdded(
      id?: null,
      rewardToken?: null,
      rewardAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { id: string; rewardToken: string; rewardAmount: BigNumber }
    >;

    "RewardPaid(address,address,address,address[],uint256[])"(
      id?: null,
      staker?: null,
      to?: null,
      rewardTokens?: null,
      rewards?: null
    ): TypedEventFilter<
      [string, string, string, string[], BigNumber[]],
      {
        id: string;
        staker: string;
        to: string;
        rewardTokens: string[];
        rewards: BigNumber[];
      }
    >;

    RewardPaid(
      id?: null,
      staker?: null,
      to?: null,
      rewardTokens?: null,
      rewards?: null
    ): TypedEventFilter<
      [string, string, string, string[], BigNumber[]],
      {
        id: string;
        staker: string;
        to: string;
        rewardTokens: string[];
        rewards: BigNumber[];
      }
    >;

    "Staked(address,address,address,uint256)"(
      id?: null,
      tokenAddress?: null,
      staker?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { id: string; tokenAddress: string; staker: string; amount: BigNumber }
    >;

    Staked(
      id?: null,
      tokenAddress?: null,
      staker?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { id: string; tokenAddress: string; staker: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    STAKE_ID(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addMarginalReward(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMarginalRewardToPool(
      id: string,
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admins(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedRewardTokenList(
      id: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedRewardTokens(
      id: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assignOperator(
      toOp: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auth(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    creationSigner(overrides?: CallOverrides): Promise<BigNumber>;

    delegateLookup(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegateSlash(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegateStake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fakeRewardOf(
      id: string,
      staker: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fakeRewardsTotal(
      id: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freezeSweep(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gateway(overrides?: CallOverrides): Promise<BigNumber>;

    getDelegateForOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      token: string,
      _name: string,
      rewardTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initDefault(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    inventory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTokenizable(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockSeconds(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    nodeOperator(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    releaseWithdrawItems(
      staker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardOf(
      id: string,
      staker: string,
      rewardTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsTotal(
      id: string,
      rewardAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      id: string,
      admin: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreationSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDelegation(
      delegate: string,
      delegator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockSeconds(
      id: string,
      _lockSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashDelegate(
      delegate: string,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashTarget(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      to: string,
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeFor(
      to: string,
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeOf(
      id: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeOfDelegate(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeToDelegate(
      to: string,
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeToDelegateWithAllocation(
      to: string,
      delegate: string,
      allocation: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeVerifyer(overrides?: CallOverrides): Promise<BigNumber>;

    stakeWithAllocation(
      staker: string,
      id: string,
      allocation: BigNumberish,
      salt: BytesLike,
      allocatorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedBalance(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakings(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    sweepBase(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    sweepRewards(
      id: string,
      rewardTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepToken(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStakeVerifyer(
      newStakeVerifyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      to: string,
      id: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawItemsQueue(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawItemsQueueParam(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawRewards(
      to: string,
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTimeOf(
      id: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    STAKE_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addMarginalReward(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMarginalRewardToPool(
      id: string,
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admins(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedRewardTokenList(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedRewardTokens(
      id: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assignOperator(
      toOp: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseToken(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creationSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegateLookup(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegateSlash(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegateStake(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fakeRewardOf(
      id: string,
      staker: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fakeRewardsTotal(
      id: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freezeSweep(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelegateForOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      token: string,
      _name: string,
      rewardTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initDefault(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    inventory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenizable(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockSeconds(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(id: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nodeOperator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseWithdrawItems(
      staker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardOf(
      id: string,
      staker: string,
      rewardTokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsTotal(
      id: string,
      rewardAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      id: string,
      admin: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreationSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDelegation(
      delegate: string,
      delegator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockSeconds(
      id: string,
      _lockSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashDelegate(
      delegate: string,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      to: string,
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeFor(
      to: string,
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeOf(
      id: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeOfDelegate(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeToDelegate(
      to: string,
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeToDelegateWithAllocation(
      to: string,
      delegate: string,
      allocation: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeVerifyer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeWithAllocation(
      staker: string,
      id: string,
      allocation: BigNumberish,
      salt: BytesLike,
      allocatorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedBalance(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sweepBase(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepFrozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweepRewards(
      id: string,
      rewardTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepToken(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStakeVerifyer(
      newStakeVerifyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usedHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      to: string,
      id: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawItemsQueue(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawItemsQueueParam(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawRewards(
      to: string,
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTimeOf(
      id: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
