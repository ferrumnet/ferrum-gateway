/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultiChainStakingClient,
  MultiChainStakingClientInterface,
} from "../MultiChainStakingClient";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AddressEmptyCode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddressInsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedInnerCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "CHAIN_ID",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MASTER_CHAIN_ID",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "masterContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "portal",
    outputs: [
      {
        internalType: "contract IQuantumPortalPoc",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
    ],
    name: "setMasterChainId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_masterContract",
        type: "address",
      },
    ],
    name: "setMasterContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052610a2860055534801561001657600080fd5b50338061003d57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004681610058565b50600180556100536100a8565b610273565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080336001600160a01b0316638eb36e3d6040518163ffffffff1660e01b81526004016000604051808303816000875af11580156100eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101139190810190610170565b8060200190518101906101269190610239565b600380546001600160a01b0319166001600160a01b0384161790559250905081156101515781610153565b465b6002555050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561018357600080fd5b82516001600160401b038082111561019a57600080fd5b818501915085601f8301126101ae57600080fd5b8151818111156101c0576101c061015a565b604051601f8201601f19908116603f011681019083821181831017156101e8576101e861015a565b81604052828152888684870101111561020057600080fd5b600093505b828410156102225784840186015181850187015292850192610205565b600086848301015280965050505050505092915050565b6000806040838503121561024c57600080fd5b82516001600160a01b038116811461026357600080fd5b6020939093015192949293505050565b6108a6806102826000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063715018a611610066578063715018a61461012557806385e1f4d01461012d5780638da5cb5b14610136578063cd446e2214610147578063f2fde38b1461015a57600080fd5b80630c51b88f146100a35780632a3a236f146100b85780634ae3a5d6146100cb5780636425666b146100de57806364494fdf1461010e575b600080fd5b6100b66100b1366004610706565b61016d565b005b6100b66100c6366004610739565b61026f565b6100b66100d9366004610754565b610299565b6003546100f1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61011760055481565b604051908152602001610105565b6100b66102a6565b61011760025481565b6000546001600160a01b03166100f1565b6004546100f1906001600160a01b031681565b6100b6610168366004610739565b6102ba565b60035461018790849033906001600160a01b0316856102f8565b6000036101d15760405162461bcd60e51b8152602060048201526013602482015272139bdd1a1a5b99c81d1c985b9cd9995c9c9959606a1b60448201526064015b60405180910390fd5b6040805160048082526024820183526020820180516001600160e01b03166303183e7360e41b1790526003546005548254945163801c6d1560e01b815293946001600160a01b039283169463801c6d159461023794929092169133918b91899101610791565b600060405180830381600087803b15801561025157600080fd5b505af1158015610265573d6000803e3d6000fd5b5050505050505050565b61027761046a565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6102a161046a565b600555565b6102ae61046a565b6102b86000610497565b565b6102c261046a565b6001600160a01b0381166102ec57604051631e4fbdf760e01b8152600060048201526024016101c8565b6102f581610497565b50565b6040516370a0823160e01b81526001600160a01b03838116600483015260009182918716906370a0823190602401602060405180830381865afa158015610343573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036791906107f8565b905061037e6001600160a01b0387168686866104e7565b6040516370a0823160e01b81526001600160a01b038581166004830152600091908816906370a0823190602401602060405180830381865afa1580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec91906107f8565b90506103f88282610811565b9250838311156104605760405162461bcd60e51b815260206004820152602d60248201527f53413a2061637475616c20616d6f756e74206c6172676572207468616e20747260448201526c185b9cd9995c88185b5bdd5b9d609a1b60648201526084016101c8565b5050949350505050565b6000546001600160a01b031633146102b85760405163118cdaa760e01b81523360048201526024016101c8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610541908590610547565b50505050565b600061055c6001600160a01b038416836105af565b9050805160001415801561058157508080602001905181019061057f9190610832565b155b156105aa57604051635274afe760e01b81526001600160a01b03841660048201526024016101c8565b505050565b60606105bd838360006105c6565b90505b92915050565b6060814710156105eb5760405163cd78605960e01b81523060048201526024016101c8565b600080856001600160a01b031684866040516106079190610854565b60006040518083038185875af1925050503d8060008114610644576040519150601f19603f3d011682016040523d82523d6000602084013e610649565b606091505b5091509150610659868383610665565b925050505b9392505050565b60608261067a57610675826106c1565b61065e565b815115801561069157506001600160a01b0384163b155b156106ba57604051639996b31560e01b81526001600160a01b03851660048201526024016101c8565b508061065e565b8051156106d15780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b038116811461070157600080fd5b919050565b60008060006060848603121561071b57600080fd5b610724846106ea565b95602085013595506040909401359392505050565b60006020828403121561074b57600080fd5b6105bd826106ea565b60006020828403121561076657600080fd5b5035919050565b60005b83811015610788578181015183820152602001610770565b50506000910152565b67ffffffffffffffff86168152600060018060a01b038087166020840152808616604084015280851660608401525060a0608083015282518060a08401526107e08160c085016020870161076d565b601f01601f19169190910160c0019695505050505050565b60006020828403121561080a57600080fd5b5051919050565b818103818111156105c057634e487b7160e01b600052601160045260246000fd5b60006020828403121561084457600080fd5b8151801515811461065e57600080fd5b6000825161086681846020870161076d565b919091019291505056fea2646970667358221220c4a61d7af1f633f6c962d58ade63e53110c1e615b813efb68eea18e513b1861264736f6c63430008180033";

export class MultiChainStakingClient__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultiChainStakingClient> {
    return super.deploy(overrides || {}) as Promise<MultiChainStakingClient>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MultiChainStakingClient {
    return super.attach(address) as MultiChainStakingClient;
  }
  connect(signer: Signer): MultiChainStakingClient__factory {
    return super.connect(signer) as MultiChainStakingClient__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiChainStakingClientInterface {
    return new utils.Interface(_abi) as MultiChainStakingClientInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiChainStakingClient {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MultiChainStakingClient;
  }
}
