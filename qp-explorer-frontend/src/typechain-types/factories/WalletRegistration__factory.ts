/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  WalletRegistration,
  WalletRegistrationInterface,
} from "../WalletRegistration";

const _abi = [
  {
    inputs: [],
    name: "NotValidTx",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "txid",
        type: "bytes32",
      },
    ],
    name: "registerProxyFromBtcTx",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unregisterProxy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "walletForProxy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061015d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630e8ec56014610046578063a6ca7f511461005b578063fdea2194146100a0575b600080fd5b6100596100543660046100de565b6100c2565b005b6100846100693660046100f7565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61005933600090815260208190526040902080546001600160a01b0319169055565b60008060405163316e496f60e01b815260040160405180910390fd5b6000602082840312156100f057600080fd5b5035919050565b60006020828403121561010957600080fd5b81356001600160a01b038116811461012057600080fd5b939250505056fea2646970667358221220adc69a6be73ed03aed0c6f54d18f14d16dc1da18992f9850a0ed37d2361c612f64736f6c63430008180033";

export class WalletRegistration__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<WalletRegistration> {
    return super.deploy(overrides || {}) as Promise<WalletRegistration>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): WalletRegistration {
    return super.attach(address) as WalletRegistration;
  }
  connect(signer: Signer): WalletRegistration__factory {
    return super.connect(signer) as WalletRegistration__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WalletRegistrationInterface {
    return new utils.Interface(_abi) as WalletRegistrationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WalletRegistration {
    return new Contract(address, _abi, signerOrProvider) as WalletRegistration;
  }
}
