/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BridgeRoutingTable,
  BridgeRoutingTableInterface,
} from "../BridgeRoutingTable";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "chainIds",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "targetToken",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "feeX10000",
            type: "uint64",
          },
          {
            internalType: "uint16",
            name: "groupId",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "noFee",
            type: "uint8",
          },
        ],
        internalType: "struct IBridgeRoutingTable.TokenWithdrawConfig[]",
        name: "configs",
        type: "tuple[]",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "timeout",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "expectedGroupId",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "multiSignature",
        type: "bytes",
      },
    ],
    name: "addRoutes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "configuredChainIds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getRoutingTable",
    outputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_chainIds",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "targetToken",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "feeX10000",
            type: "uint64",
          },
          {
            internalType: "uint16",
            name: "groupId",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "noFee",
            type: "uint8",
          },
        ],
        internalType: "struct IBridgeRoutingTable.TokenWithdrawConfig[]",
        name: "_configs",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "chainIds",
        type: "uint256[]",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "timeout",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "expectedGroupId",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "multiSignature",
        type: "bytes",
      },
    ],
    name: "removeRoutes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sourceToken",
        type: "address",
      },
    ],
    name: "routes",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "targetToken",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "feeX10000",
            type: "uint64",
          },
          {
            internalType: "uint16",
            name: "groupId",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "noFee",
            type: "uint8",
          },
        ],
        internalType: "struct IBridgeRoutingTable.TokenWithdrawConfig[]",
        name: "_routes",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "routingIds",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "routingTable",
    outputs: [
      {
        internalType: "address",
        name: "targetToken",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "feeX10000",
        type: "uint64",
      },
      {
        internalType: "uint16",
        name: "groupId",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "noFee",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "tryWithdrawConfig",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "targetToken",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "feeX10000",
            type: "uint64",
          },
          {
            internalType: "uint16",
            name: "groupId",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "noFee",
            type: "uint8",
          },
        ],
        internalType: "struct IBridgeRoutingTable.TokenWithdrawConfig",
        name: "config",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "chainIds",
        type: "uint256[]",
      },
      {
        internalType: "uint64[]",
        name: "fees",
        type: "uint64[]",
      },
      {
        internalType: "uint8[]",
        name: "noFees",
        type: "uint8[]",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "timeout",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "expectedGroupId",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "multiSignature",
        type: "bytes",
      },
    ],
    name: "updateFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sourceToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "targetChainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "targetToken",
        type: "address",
      },
    ],
    name: "verifyRoute",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "withdrawConfig",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "targetToken",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "feeX10000",
            type: "uint64",
          },
          {
            internalType: "uint16",
            name: "groupId",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "noFee",
            type: "uint8",
          },
        ],
        internalType: "struct IBridgeRoutingTable.TokenWithdrawConfig",
        name: "config",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611ebc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80639af9b035116100715780639af9b03514610142578063a576916a14610155578063d00030df146101f9578063d74096591461020c578063dcd8791d1461022c578063fb5cb5c4146102c457600080fd5b806310c07f2f146100ae57806337492159146100d75780636c8abea1146100ec57806378d6cbdd1461010d57806379342a941461012f575b600080fd5b6100c16100bc366004611753565b610305565b6040516100ce91906117b1565b60405180910390f35b6100ea6100e5366004611956565b610438565b005b6100ff6100fa366004611ace565b6109e9565b6040519081526020016100ce565b61012061011b366004611753565b610a1a565b6040516100ce93929190611b3e565b6100ea61013d366004611ba7565b610bfd565b6100ea610150366004611be3565b610dbd565b6100c1610163366004611753565b60408051608080820183526000808352602080840182905283850182905260609384018290526001600160a01b03958616825260028152848220548616825281815284822046835281529084902084519283018552549485168252600160a01b85046001600160401b031690820152600160e01b840461ffff1692810192909252600160f01b90920460ff169181019190915290565b6100ea610207366004611d45565b610e54565b61021f61021a366004611753565b6112f1565b6040516100ce9190611e26565b61028661023a366004611ace565b60006020818152928152604080822090935290815220546001600160a01b03811690600160a01b81046001600160401b031690600160e01b810461ffff1690600160f01b900460ff1684565b604080516001600160a01b0390951685526001600160401b03909316602085015261ffff9091169183019190915260ff1660608201526080016100ce565b6102ed6102d2366004611753565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100ce565b6040805160808101825260008082526020820181905291810182905260608101919091526001600160a01b0380831660009081526002602052604090205416806103875760405162461bcd60e51b815260206004820152600e60248201526d1094950e881b9bdd08199bdd5b9960921b60448201526064015b60405180910390fd5b6001600160a01b0381811660009081526020818152604080832046845282529182902082516080810184529054938416808252600160a01b85046001600160401b031692820192909252600160e01b840461ffff1692810192909252600160f01b90920460ff16606082015292506104325760405162461bcd60e51b815260206004820152600e60248201526d4252543a206e6f20636f6e66696760901b604482015260640161037e565b50919050565b6001600160a01b0387166104815760405162461bcd60e51b815260206004820152601060248201526f1094950e881a59081c995c5d5a5c995960821b604482015260640161037e565b84518651146104dc5760405162461bcd60e51b815260206004820152602160248201527f4252543a2070726f76696465206f6e6520636f6e6669672070657220636861696044820152603760f91b606482015260840161037e565b60008490036105225760405162461bcd60e51b81526020600482015260126024820152711094950e881cd85b1d081c995c5d5a5c995960721b604482015260640161037e565b8242106105605760405162461bcd60e51b815260206004820152600c60248201526b1094950e88195e1c1a5c995960a21b604482015260640161037e565b80516000036105b15760405162461bcd60e51b815260206004820152601c60248201527f4252543a206d756c74695369676e617475726520726571756972656400000000604482015260640161037e565b6000805b8751811015610988576001600160a01b0389166000908152602081905260408120895182908b90859081106105ec576105ec611e39565b6020908102919091018101518252810191909152604001600020546001600160a01b0316146106735760405162461bcd60e51b815260206004820152602d60248201527f4252543a2063616e6e6f7420757064617465207461626c652e2054727920646560448201526c3632ba34b733903334b939ba1760991b606482015260840161037e565b86818151811061068557610685611e39565b602090810291909101810151516001600160a01b03808216600090815260029093526040909220549093501680156107175760405162461bcd60e51b815260206004820152602f60248201527f4252543a20746f6b656e20697320616c726561647920636f6e6669677572656460448201526e17102232b632ba32903334b939ba1760891b606482015260840161037e565b6001600160a01b03838116600090815260026020526040812080546001600160a01b031916928d1692909217909155885189908490811061075a5761075a611e39565b602090810291909101015180519091506001600160a01b03166107bf5760405162461bcd60e51b815260206004820152601c60248201527f5057433a20746172676574546f6b656e20697320726571756972656400000000604482015260640161037e565b611f4081602001516001600160401b031611156108135760405162461bcd60e51b81526020600482015260126024820152714252543a2066656520746f6f206c6172676560701b604482015260640161037e565b606081015160ff16158061082e5750806060015160ff166001145b61087a5760405162461bcd60e51b815260206004820152601960248201527f4252543a206e6f466565206d7573742062652030206f72203100000000000000604482015260640161037e565b6001600160a01b038b1660009081526020819052604081208b518392908d90879081106108a9576108a9611e39565b6020908102919091018101518252818101929092526040908101600090812084518154868601518786015160609098015160ff16600160f01b0260ff60f01b1961ffff909916600160e01b029890981662ffffff60e01b196001600160401b03909216600160a01b026001600160e01b03199093166001600160a01b0394851617929092171617959095179055928e168352600190915290208a518b908590811061095657610956611e39565b602090810291909101810151825460018181018555600094855292909320909201919091559290920191506105b59050565b506001600160a01b0381166109df5760405162461bcd60e51b815260206004820152601d60248201527f4252543a206e6f2074617267657420666f72207468697320636861696e000000604482015260640161037e565b5050505050505050565b60016020528160005260406000208181548110610a0557600080fd5b90600052602060002001600091509150505481565b6001600160a01b0380821660009081526002602090815260408083205490931680835260019091529190205460609081906001600160401b03811115610a6257610a626117bf565b604051908082528060200260200182016040528015610ab457816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610a805790505b506001600160a01b0384166000908152600160209081526040918290208054835181840281018401909452808452939450919290830182828015610b1757602002820191906000526020600020905b815481526020019060010190808311610b03575b5050505050915060005b8251811015610bf557600080856001600160a01b03166001600160a01b031681526020019081526020016000206000848381518110610b6257610b62611e39565b6020908102919091018101518252818101929092526040908101600020815160808101835290546001600160a01b0381168252600160a01b81046001600160401b031693820193909352600160e01b830461ffff1691810191909152600160f01b90910460ff1660608201528251839083908110610be257610be2611e39565b6020908102919091010152600101610b21565b509193909250565b6001600160a01b038316610c535760405162461bcd60e51b815260206004820152601960248201527f4252543a20736f75726365546f6b656e20726571756972656400000000000000604482015260640161037e565b81600003610ca35760405162461bcd60e51b815260206004820152601b60248201527f4252543a20746172676574436861696e49642072657175697265640000000000604482015260640161037e565b6001600160a01b038116610cf95760405162461bcd60e51b815260206004820152601960248201527f4252543a20746172676574546f6b656e20726571756972656400000000000000604482015260640161037e565b6001600160a01b038084166000908152600260205260409020541680610d525760405162461bcd60e51b815260206004820152600e60248201526d1094950e881b9bdd08199bdd5b9960921b604482015260640161037e565b6001600160a01b03818116600090815260208181526040808320878452909152902054811690831614610db75760405162461bcd60e51b815260206004820152600d60248201526c4252543a206e6f20726f75746560981b604482015260640161037e565b50505050565b60005b8551811015610e4b576001600160a01b038716600090815260208190526040812087518290899085908110610df757610df7611e39565b6020908102919091018101518252810191909152604001600020546001600160a01b031614610e4357610e4387878381518110610e3657610e36611e39565b602002602001015161155b565b600101610dc0565b50505050505050565b6001600160a01b038816610e9d5760405162461bcd60e51b815260206004820152601060248201526f1094950e881a59081c995c5d5a5c995960821b604482015260640161037e565b8651865114610eee5760405162461bcd60e51b815260206004820152601e60248201527f4252543a2070726f76696465206f6e65206665652070657220636861696e0000604482015260640161037e565b8651855114610f3f5760405162461bcd60e51b815260206004820181905260248201527f4252543a2070726f76696465206f6e65206e6f4665652070657220636861696e604482015260640161037e565b6000849003610f855760405162461bcd60e51b81526020600482015260126024820152711094950e881cd85b1d081c995c5d5a5c995960721b604482015260640161037e565b824210610fc35760405162461bcd60e51b815260206004820152600c60248201526b1094950e88195e1c1a5c995960a21b604482015260640161037e565b80516000036110145760405162461bcd60e51b815260206004820152601c60248201527f4252543a206d756c74695369676e617475726520726571756972656400000000604482015260640161037e565b60005b87518110156112e6576001600160a01b0389166000908152602081905260408120895182908b908590811061104e5761104e611e39565b6020908102919091018101518252810191909152604001600020546001600160a01b0316036110ca5760405162461bcd60e51b815260206004820152602260248201527f4252543a20746f6b656e206f7220636861696e206e6f7420636f6e6669677572604482015261195960f21b606482015260840161037e565b611f408782815181106110df576110df611e39565b60200260200101516001600160401b031611156111335760405162461bcd60e51b81526020600482015260126024820152714252543a2066656520746f6f206c6172676560701b604482015260640161037e565b86818151811061114557611145611e39565b60200260200101516000808b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a848151811061118557611185611e39565b6020026020010151815260200190815260200160002060000160146101000a8154816001600160401b0302191690836001600160401b031602179055508581815181106111d4576111d4611e39565b602002602001015160ff166000148061120957508581815181106111fa576111fa611e39565b602002602001015160ff166001145b6112555760405162461bcd60e51b815260206004820152601960248201527f4252543a206e6f466565206d7573742062652031206f72203000000000000000604482015260640161037e565b85818151811061126757611267611e39565b60200260200101516000808b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a84815181106112a7576112a7611e39565b6020908102919091018101518252810191909152604001600020805460ff92909216600160f01b0260ff60f01b19909216919091179055600101611017565b505050505050505050565b60606001600160a01b03821661133f5760405162461bcd60e51b81526020600482015260136024820152721094950e881d1bdad95b881c995c5d5a5c9959606a1b604482015260640161037e565b6001600160a01b0380831660009081526002602052604090205416806113a75760405162461bcd60e51b815260206004820152601960248201527f4252543a20746f6b656e206e6f7420636f6e6669677572656400000000000000604482015260640161037e565b6001600160a01b03811660009081526001602090815260408083208054825181850281018501909352808352919290919083018282801561140757602002820191906000526020600020905b8154815260200190600101908083116113f3575b5050505050905080516001600160401b03811115611427576114276117bf565b60405190808252806020026020018201604052801561147957816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816114455790505b50925060005b815181101561155357600080846001600160a01b03166001600160a01b0316815260200190815260200160002060008383815181106114c0576114c0611e39565b6020908102919091018101518252818101929092526040908101600020815160808101835290546001600160a01b0381168252600160a01b81046001600160401b031693820193909352600160e01b830461ffff1691810191909152600160f01b90910460ff166060820152845185908390811061154057611540611e39565b602090810291909101015260010161147f565b505050919050565b6001600160a01b0382166000908152600160205260408120549061157f8484611678565b6001600160a01b03851660009081526001602081905260409091209192506115a79084611e4f565b815481106115b7576115b7611e39565b906000526020600020015460016000866001600160a01b03166001600160a01b0316815260200190815260200160002082815481106115f8576115f8611e39565b60009182526020808320909101929092556001600160a01b038616815260019091526040902080548061162d5761162d611e70565b6000828152602080822083016000199081018390559092019092556001600160a01b0390951681528085526040808220948252939094525050902080546001600160f81b0319169055565b6000805b6001600160a01b0384166000908152600160205260409020548110156116e8576001600160a01b03841660009081526001602052604090208054849190839081106116c9576116c9611e39565b9060005260206000200154036116e0579050611731565b60010161167c565b5060405162461bcd60e51b815260206004820152601b60248201527f4252543a20636861696e4964206e6f7420636f6e666967757265640000000000604482015260640161037e565b92915050565b80356001600160a01b038116811461174e57600080fd5b919050565b60006020828403121561176557600080fd5b61176e82611737565b9392505050565b80516001600160a01b031682526020808201516001600160401b03169083015260408082015161ffff169083015260609081015160ff16910152565b608081016117318284611775565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156117f7576117f76117bf565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611825576118256117bf565b604052919050565b60006001600160401b03821115611846576118466117bf565b5060051b60200190565b600082601f83011261186157600080fd5b813560206118766118718361182d565b6117fd565b8083825260208201915060208460051b87010193508684111561189857600080fd5b602086015b848110156118b4578035835291830191830161189d565b509695505050505050565b80356001600160401b038116811461174e57600080fd5b803560ff8116811461174e57600080fd5b600082601f8301126118f857600080fd5b81356001600160401b03811115611911576119116117bf565b611924601f8201601f19166020016117fd565b81815284602083860101111561193957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600060e0888a03121561197157600080fd5b61197a88611737565b965060208801356001600160401b038082111561199657600080fd5b6119a28b838c01611850565b975060408a01359150808211156119b857600080fd5b818a0191508a601f8301126119cc57600080fd5b81356119da6118718261182d565b8082825260208201915060208360071b86010192508d8311156119fc57600080fd5b6020850194505b82851015611a7e576080858f031215611a1b57600080fd5b611a236117d5565b611a2c86611737565b8152611a3a602087016118bf565b6020820152604086013561ffff81168114611a5457600080fd5b6040820152611a65606087016118d6565b6060820152825260809490940193602090910190611a03565b9850505060608a0135955060808a01359450611a9c60a08b016118bf565b935060c08a0135915080821115611ab257600080fd5b50611abf8a828b016118e7565b91505092959891949750929550565b60008060408385031215611ae157600080fd5b611aea83611737565b946020939093013593505050565b60008151808452602080850194506020840160005b83811015611b3357611b20878351611775565b6080969096019590820190600101611b0d565b509495945050505050565b6001600160a01b038416815260606020808301829052845191830182905260009185820191906080850190845b81811015611b8757845183529383019391830191600101611b6b565b50508481036040860152611b9b8187611af8565b98975050505050505050565b600080600060608486031215611bbc57600080fd5b611bc584611737565b925060208401359150611bda60408501611737565b90509250925092565b60008060008060008060c08789031215611bfc57600080fd5b611c0587611737565b955060208701356001600160401b0380821115611c2157600080fd5b611c2d8a838b01611850565b96506040890135955060608901359450611c4960808a016118bf565b935060a0890135915080821115611c5f57600080fd5b50611c6c89828a016118e7565b9150509295509295509295565b600082601f830112611c8a57600080fd5b81356020611c9a6118718361182d565b8083825260208201915060208460051b870101935086841115611cbc57600080fd5b602086015b848110156118b457611cd2816118bf565b8352918301918301611cc1565b600082601f830112611cf057600080fd5b81356020611d006118718361182d565b8083825260208201915060208460051b870101935086841115611d2257600080fd5b602086015b848110156118b457611d38816118d6565b8352918301918301611d27565b600080600080600080600080610100898b031215611d6257600080fd5b611d6b89611737565b975060208901356001600160401b0380821115611d8757600080fd5b611d938c838d01611850565b985060408b0135915080821115611da957600080fd5b611db58c838d01611c79565b975060608b0135915080821115611dcb57600080fd5b611dd78c838d01611cdf565b965060808b0135955060a08b01359450611df360c08c016118bf565b935060e08b0135915080821115611e0957600080fd5b50611e168b828c016118e7565b9150509295985092959890939650565b60208152600061176e6020830184611af8565b634e487b7160e01b600052603260045260246000fd5b8181038181111561173157634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212203d0b8ee7a5cae7e6c474c71a743acc05b6f86155f56838d2fab8cb14e847c31b64736f6c63430008180033";

export class BridgeRoutingTable__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BridgeRoutingTable> {
    return super.deploy(overrides || {}) as Promise<BridgeRoutingTable>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BridgeRoutingTable {
    return super.attach(address) as BridgeRoutingTable;
  }
  connect(signer: Signer): BridgeRoutingTable__factory {
    return super.connect(signer) as BridgeRoutingTable__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeRoutingTableInterface {
    return new utils.Interface(_abi) as BridgeRoutingTableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeRoutingTable {
    return new Contract(address, _abi, signerOrProvider) as BridgeRoutingTable;
  }
}
