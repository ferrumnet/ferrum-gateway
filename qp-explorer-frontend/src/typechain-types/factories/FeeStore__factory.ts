/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { FeeStore, FeeStoreInterface } from "../FeeStore";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AddressEmptyCode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddressInsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "CouldNotSendFee",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedInnerCall",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyBtc",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyFactory",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "txId",
        type: "bytes32",
      },
    ],
    name: "collectFee",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract ITokenFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "txId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "btcAmount",
        type: "uint256",
      },
    ],
    name: "swapBtcWithFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "sweepToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5033608052608051610a7361005160003960008181607c0152818160eb015281816101430152818161033e015281816103f3015261050c0152610a736000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063b15ce09914610051578063c45a015514610077578063de8a465c146100b6578063df2ab5bb146100cb575b600080fd5b61006461005f3660046108d1565b6100de565b6040519081526020015b60405180910390f35b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161006e565b6100c96100c43660046108ea565b61033c565b005b6100c96100d9366004610921565b610501565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461012957604051630636a15760e11b815260040160405180910390fd5b5060008181526020819052604090205480156103375760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636425666b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561019f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c39190610963565b9050806001600160a01b031663647846a56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102279190610963565b6001600160a01b031663a9059cbb826001600160a01b031663cd3c695a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102979190610963565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1925050508015610300575060408051601f3d908101601f191682019092526102fd91810190610980565b60015b61032557604051631a92dc6b60e01b8152600481018390526024015b60405180910390fd5b50600083815260208190526040812055505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a28d57d86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103be9190610963565b6001600160a01b0316336001600160a01b0316146103ef576040516314a5a3cd60e11b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b8863a186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190610963565b6001600160a01b031663aa6fff736040518163ffffffff1660e01b81526004016020604051808303816000875af11580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d691906109a2565b905060006104e983600160801b84610563565b60009485526020859052604090942093909355505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461054a57604051630636a15760e11b815260040160405180910390fd5b61055e6001600160a01b03841682846106e9565b505050565b600080806000198587098587029250828110838203039150508060000361059c576000841161059157600080fd5b5082900490506106e2565b8084116105a857600080fd5b6000848688098084039381119092039190506000856105c9816000196109d1565b6105d49060016109e4565b169586900495938490049360008190030460010190506105f481846109f7565b9093179260006106058760036109f7565b600218905061061481886109f7565b61061f9060026109d1565b61062990826109f7565b905061063581886109f7565b6106409060026109d1565b61064a90826109f7565b905061065681886109f7565b6106619060026109d1565b61066b90826109f7565b905061067781886109f7565b6106829060026109d1565b61068c90826109f7565b905061069881886109f7565b6106a39060026109d1565b6106ad90826109f7565b90506106b981886109f7565b6106c49060026109d1565b6106ce90826109f7565b90506106da81866109f7565b955050505050505b9392505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092019092526020810180516001600160e01b031663a9059cbb60e01b17905261055e9185919060009061074790841683610795565b9050805160001415801561076c57508080602001905181019061076a9190610980565b155b1561055e57604051635274afe760e01b81526001600160a01b038416600482015260240161031c565b60606107a3838360006107ac565b90505b92915050565b6060814710156107d15760405163cd78605960e01b815230600482015260240161031c565b600080856001600160a01b031684866040516107ed9190610a0e565b60006040518083038185875af1925050503d806000811461082a576040519150601f19603f3d011682016040523d82523d6000602084013e61082f565b606091505b509150915061083f868383610849565b9695505050505050565b60608261085e57610859826108a5565b6106e2565b815115801561087557506001600160a01b0384163b155b1561089e57604051639996b31560e01b81526001600160a01b038516600482015260240161031c565b50806106e2565b8051156108b55780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b6000602082840312156108e357600080fd5b5035919050565b600080604083850312156108fd57600080fd5b50508035926020909101359150565b6001600160a01b03811681146108ce57600080fd5b60008060006060848603121561093657600080fd5b83356109418161090c565b92506020840135915060408401356109588161090c565b809150509250925092565b60006020828403121561097557600080fd5b81516106e28161090c565b60006020828403121561099257600080fd5b815180151581146106e257600080fd5b6000602082840312156109b457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156107a6576107a66109bb565b808201808211156107a6576107a66109bb565b80820281158282048414176107a6576107a66109bb565b6000825160005b81811015610a2f5760208186018101518583015201610a15565b50600092019182525091905056fea26469706673582212200e8a9f9273d10c1c3a1ba646b7ab9d72efc324fed92fd6b87d2b4ba87f88de8364736f6c63430008180033";

export class FeeStore__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FeeStore> {
    return super.deploy(overrides || {}) as Promise<FeeStore>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FeeStore {
    return super.attach(address) as FeeStore;
  }
  connect(signer: Signer): FeeStore__factory {
    return super.connect(signer) as FeeStore__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeStoreInterface {
    return new utils.Interface(_abi) as FeeStoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FeeStore {
    return new Contract(address, _abi, signerOrProvider) as FeeStore;
  }
}
