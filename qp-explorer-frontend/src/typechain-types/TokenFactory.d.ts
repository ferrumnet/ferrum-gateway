/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TokenFactoryInterface extends ethers.utils.Interface {
  functions: {
    "btc()": FunctionFragment;
    "btcBeacon()": FunctionFragment;
    "btcImplementation()": FunctionFragment;
    "deployRuneToken(uint256,uint64,string,string,uint8,uint256,bytes32)": FunctionFragment;
    "feeConvertor()": FunctionFragment;
    "feeStore()": FunctionFragment;
    "feeStoreCollectFee(bytes32)": FunctionFragment;
    "feeStoreSweepToken(address,uint256,address)": FunctionFragment;
    "getRuneTokenAddress(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "portal()": FunctionFragment;
    "qpRuneWallet()": FunctionFragment;
    "qpWallet()": FunctionFragment;
    "registration()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "runeBeacon()": FunctionFragment;
    "runeImplementation()": FunctionFragment;
    "runeTokens(bytes32)": FunctionFragment;
    "runeTokensByAddress(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePortal(address,address,address,address)": FunctionFragment;
    "upgradeImplementations(address,address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "btc", values?: undefined): string;
  encodeFunctionData(functionFragment: "btcBeacon", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "btcImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployRuneToken",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeConvertor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeStoreCollectFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeStoreSweepToken",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRuneTokenAddress",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "portal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "qpRuneWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "qpWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "runeBeacon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "runeImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "runeTokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "runeTokensByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePortal",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeImplementations",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "btc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "btcBeacon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "btcImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployRuneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeConvertor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeStoreCollectFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeStoreSweepToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRuneTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "portal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "qpRuneWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "qpWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "runeBeacon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "runeImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "runeTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "runeTokensByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeImplementations",
    data: BytesLike
  ): Result;

  events: {
    "Deployed(address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type DeployedEvent = TypedEvent<
  [string, string, string] & { impl: string; deped: string; beacon: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class TokenFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenFactoryInterface;

  functions: {
    btc(overrides?: CallOverrides): Promise<[string]>;

    btcBeacon(overrides?: CallOverrides): Promise<[string]>;

    btcImplementation(overrides?: CallOverrides): Promise<[string]>;

    deployRuneToken(
      runeId: BigNumberish,
      version: BigNumberish,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      totalSupply: BigNumberish,
      deployTxId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeConvertor(overrides?: CallOverrides): Promise<[string]>;

    feeStore(overrides?: CallOverrides): Promise<[string]>;

    feeStoreCollectFee(
      txId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeStoreSweepToken(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRuneTokenAddress(
      runeId: BigNumberish,
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    portal(overrides?: CallOverrides): Promise<[string]>;

    qpRuneWallet(overrides?: CallOverrides): Promise<[string]>;

    qpWallet(overrides?: CallOverrides): Promise<[string]>;

    registration(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    runeBeacon(overrides?: CallOverrides): Promise<[string]>;

    runeImplementation(overrides?: CallOverrides): Promise<[string]>;

    runeTokens(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    runeTokensByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePortal(
      _portal: string,
      _feeConvertor: string,
      _qpWallet: string,
      _qpRuneWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeImplementations(
      newRuneImpl: string,
      newBtcImpl: string,
      _registration: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  btc(overrides?: CallOverrides): Promise<string>;

  btcBeacon(overrides?: CallOverrides): Promise<string>;

  btcImplementation(overrides?: CallOverrides): Promise<string>;

  deployRuneToken(
    runeId: BigNumberish,
    version: BigNumberish,
    name: string,
    symbol: string,
    decimals: BigNumberish,
    totalSupply: BigNumberish,
    deployTxId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeConvertor(overrides?: CallOverrides): Promise<string>;

  feeStore(overrides?: CallOverrides): Promise<string>;

  feeStoreCollectFee(
    txId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeStoreSweepToken(
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRuneTokenAddress(
    runeId: BigNumberish,
    version: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  portal(overrides?: CallOverrides): Promise<string>;

  qpRuneWallet(overrides?: CallOverrides): Promise<string>;

  qpWallet(overrides?: CallOverrides): Promise<string>;

  registration(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  runeBeacon(overrides?: CallOverrides): Promise<string>;

  runeImplementation(overrides?: CallOverrides): Promise<string>;

  runeTokens(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  runeTokensByAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePortal(
    _portal: string,
    _feeConvertor: string,
    _qpWallet: string,
    _qpRuneWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeImplementations(
    newRuneImpl: string,
    newBtcImpl: string,
    _registration: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    btc(overrides?: CallOverrides): Promise<string>;

    btcBeacon(overrides?: CallOverrides): Promise<string>;

    btcImplementation(overrides?: CallOverrides): Promise<string>;

    deployRuneToken(
      runeId: BigNumberish,
      version: BigNumberish,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      totalSupply: BigNumberish,
      deployTxId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    feeConvertor(overrides?: CallOverrides): Promise<string>;

    feeStore(overrides?: CallOverrides): Promise<string>;

    feeStoreCollectFee(
      txId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeStoreSweepToken(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getRuneTokenAddress(
      runeId: BigNumberish,
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    portal(overrides?: CallOverrides): Promise<string>;

    qpRuneWallet(overrides?: CallOverrides): Promise<string>;

    qpWallet(overrides?: CallOverrides): Promise<string>;

    registration(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    runeBeacon(overrides?: CallOverrides): Promise<string>;

    runeImplementation(overrides?: CallOverrides): Promise<string>;

    runeTokens(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    runeTokensByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePortal(
      _portal: string,
      _feeConvertor: string,
      _qpWallet: string,
      _qpRuneWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeImplementations(
      newRuneImpl: string,
      newBtcImpl: string,
      _registration: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deployed(address,address,address)"(
      impl?: null,
      deped?: null,
      beacon?: null
    ): TypedEventFilter<
      [string, string, string],
      { impl: string; deped: string; beacon: string }
    >;

    Deployed(
      impl?: null,
      deped?: null,
      beacon?: null
    ): TypedEventFilter<
      [string, string, string],
      { impl: string; deped: string; beacon: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    btc(overrides?: CallOverrides): Promise<BigNumber>;

    btcBeacon(overrides?: CallOverrides): Promise<BigNumber>;

    btcImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    deployRuneToken(
      runeId: BigNumberish,
      version: BigNumberish,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      totalSupply: BigNumberish,
      deployTxId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeConvertor(overrides?: CallOverrides): Promise<BigNumber>;

    feeStore(overrides?: CallOverrides): Promise<BigNumber>;

    feeStoreCollectFee(
      txId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeStoreSweepToken(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRuneTokenAddress(
      runeId: BigNumberish,
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    portal(overrides?: CallOverrides): Promise<BigNumber>;

    qpRuneWallet(overrides?: CallOverrides): Promise<BigNumber>;

    qpWallet(overrides?: CallOverrides): Promise<BigNumber>;

    registration(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    runeBeacon(overrides?: CallOverrides): Promise<BigNumber>;

    runeImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    runeTokens(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    runeTokensByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePortal(
      _portal: string,
      _feeConvertor: string,
      _qpWallet: string,
      _qpRuneWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeImplementations(
      newRuneImpl: string,
      newBtcImpl: string,
      _registration: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    btc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    btcBeacon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    btcImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployRuneToken(
      runeId: BigNumberish,
      version: BigNumberish,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      totalSupply: BigNumberish,
      deployTxId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeConvertor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeStoreCollectFee(
      txId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeStoreSweepToken(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRuneTokenAddress(
      runeId: BigNumberish,
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    portal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    qpRuneWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    qpWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    runeBeacon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    runeImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    runeTokens(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    runeTokensByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePortal(
      _portal: string,
      _feeConvertor: string,
      _qpWallet: string,
      _qpRuneWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeImplementations(
      newRuneImpl: string,
      newBtcImpl: string,
      _registration: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
