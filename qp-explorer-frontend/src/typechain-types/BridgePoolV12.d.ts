/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BridgePoolV12Interface extends ethers.utils.Interface {
  functions: {
    "DATA_CHAIN()": FunctionFragment;
    "DEFAULT_FEE_X10000()": FunctionFragment;
    "addLiquidity(address,address)": FunctionFragment;
    "admin()": FunctionFragment;
    "feeDistributor()": FunctionFragment;
    "initializeWithQp(address)": FunctionFragment;
    "inventory(address)": FunctionFragment;
    "liquidities(address,address)": FunctionFragment;
    "liquidity(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "portal()": FunctionFragment;
    "remotePeers(uint256)": FunctionFragment;
    "remoteSwap(address,address,uint256,uint32)": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256,address)": FunctionFragment;
    "removeLiquidityIfPossible(address,address,uint256)": FunctionFragment;
    "removeRemotePeers(uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "routingTable()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setFeeDistributor(address)": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "setRoutingTable(address)": FunctionFragment;
    "swap(address,address,uint256,address,address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePortal(address)": FunctionFragment;
    "updateRemotePeers(uint256[],address[])": FunctionFragment;
    "withdraw(address)": FunctionFragment;
    "withdrawItems(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DATA_CHAIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_FEE_X10000",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeWithQp",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "inventory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidities",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidity",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "portal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remotePeers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remoteSwap",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityIfPossible",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRemotePeers",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "routingTable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeDistributor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRoutingTable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePortal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRemotePeers",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawItems",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "DATA_CHAIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_FEE_X10000",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeWithQp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inventory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "portal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remotePeers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remoteSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityIfPossible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRemotePeers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "routingTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoutingTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRemotePeers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawItems",
    data: BytesLike
  ): Result;

  events: {
    "AdminSet(address)": EventFragment;
    "BridgeLiquidityAdded(address,address,uint256)": EventFragment;
    "BridgeLiquidityRemoved(address,address,uint256,uint256,address,uint256)": EventFragment;
    "BridgeSwap(address,address,address,uint256,address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeLiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeLiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AdminSetEvent = TypedEvent<[string] & { admin: string }>;

export type BridgeLiquidityAddedEvent = TypedEvent<
  [string, string, BigNumber] & {
    actor: string;
    token: string;
    amount: BigNumber;
  }
>;

export type BridgeLiquidityRemovedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber] & {
    actor: string;
    token: string;
    amountRemoved: BigNumber;
    owedNetwork: BigNumber;
    owedToken: string;
    owedLiquidity: BigNumber;
  }
>;

export type BridgeSwapEvent = TypedEvent<
  [string, string, string, BigNumber, string, string, BigNumber] & {
    from: string;
    originToken: string;
    token: string;
    targetNetwork: BigNumber;
    targetToken: string;
    targetAddress: string;
    amount: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    receiver: string;
    token: string;
    amount: BigNumber;
    fee: BigNumber;
  }
>;

export class BridgePoolV12 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgePoolV12Interface;

  functions: {
    DATA_CHAIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_FEE_X10000(overrides?: CallOverrides): Promise<[BigNumber]>;

    addLiquidity(
      to: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    feeDistributor(overrides?: CallOverrides): Promise<[string]>;

    initializeWithQp(
      _portal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    inventory(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidities(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidity(
      token: string,
      liquidityAdder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    portal(overrides?: CallOverrides): Promise<[string]>;

    remotePeers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    remoteSwap(
      token: string,
      payee: string,
      amount: BigNumberish,
      sourceChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      to: string,
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityIfPossible(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRemotePeers(
      chainIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    routingTable(overrides?: CallOverrides): Promise<[string]>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoutingTable(
      _routingTable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      to: string,
      token: string,
      targetNetwork: BigNumberish,
      targetToken: string,
      targetAddress: string,
      originToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePortal(
      _portal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRemotePeers(
      chainIds: BigNumberish[],
      remotes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      payee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawItems(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        token: string;
        payee: string;
        amount: BigNumber;
      }
    >;
  };

  DATA_CHAIN(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_FEE_X10000(overrides?: CallOverrides): Promise<BigNumber>;

  addLiquidity(
    to: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  feeDistributor(overrides?: CallOverrides): Promise<string>;

  initializeWithQp(
    _portal: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  inventory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  liquidities(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidity(
    token: string,
    liquidityAdder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  portal(overrides?: CallOverrides): Promise<string>;

  remotePeers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  remoteSwap(
    token: string,
    payee: string,
    amount: BigNumberish,
    sourceChainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    to: string,
    token: string,
    amount: BigNumberish,
    targetNetwork: BigNumberish,
    targetToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityIfPossible(
    to: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRemotePeers(
    chainIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  routingTable(overrides?: CallOverrides): Promise<string>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeDistributor(
    _feeDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRouter(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoutingTable(
    _routingTable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    to: string,
    token: string,
    targetNetwork: BigNumberish,
    targetToken: string,
    targetAddress: string,
    originToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePortal(
    _portal: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRemotePeers(
    chainIds: BigNumberish[],
    remotes: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    payee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawItems(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      token: string;
      payee: string;
      amount: BigNumber;
    }
  >;

  callStatic: {
    DATA_CHAIN(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_FEE_X10000(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      to: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    feeDistributor(overrides?: CallOverrides): Promise<string>;

    initializeWithQp(_portal: string, overrides?: CallOverrides): Promise<void>;

    inventory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidities(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidity(
      token: string,
      liquidityAdder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    portal(overrides?: CallOverrides): Promise<string>;

    remotePeers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    remoteSwap(
      token: string,
      payee: string,
      amount: BigNumberish,
      sourceChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      to: string,
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityIfPossible(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRemotePeers(
      chainIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    routingTable(overrides?: CallOverrides): Promise<string>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouter(_router: string, overrides?: CallOverrides): Promise<void>;

    setRoutingTable(
      _routingTable: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      to: string,
      token: string,
      targetNetwork: BigNumberish,
      targetToken: string,
      targetAddress: string,
      originToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePortal(_portal: string, overrides?: CallOverrides): Promise<void>;

    updateRemotePeers(
      chainIds: BigNumberish[],
      remotes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(payee: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawItems(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        token: string;
        payee: string;
        amount: BigNumber;
      }
    >;
  };

  filters: {
    "AdminSet(address)"(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    AdminSet(admin?: null): TypedEventFilter<[string], { admin: string }>;

    "BridgeLiquidityAdded(address,address,uint256)"(
      actor?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { actor: string; token: string; amount: BigNumber }
    >;

    BridgeLiquidityAdded(
      actor?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { actor: string; token: string; amount: BigNumber }
    >;

    "BridgeLiquidityRemoved(address,address,uint256,uint256,address,uint256)"(
      actor?: null,
      token?: null,
      amountRemoved?: null,
      owedNetwork?: null,
      owedToken?: null,
      owedLiquidity?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string, BigNumber],
      {
        actor: string;
        token: string;
        amountRemoved: BigNumber;
        owedNetwork: BigNumber;
        owedToken: string;
        owedLiquidity: BigNumber;
      }
    >;

    BridgeLiquidityRemoved(
      actor?: null,
      token?: null,
      amountRemoved?: null,
      owedNetwork?: null,
      owedToken?: null,
      owedLiquidity?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string, BigNumber],
      {
        actor: string;
        token: string;
        amountRemoved: BigNumber;
        owedNetwork: BigNumber;
        owedToken: string;
        owedLiquidity: BigNumber;
      }
    >;

    "BridgeSwap(address,address,address,uint256,address,address,uint256)"(
      from?: null,
      originToken?: null,
      token?: null,
      targetNetwork?: null,
      targetToken?: null,
      targetAddress?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, string, BigNumber],
      {
        from: string;
        originToken: string;
        token: string;
        targetNetwork: BigNumber;
        targetToken: string;
        targetAddress: string;
        amount: BigNumber;
      }
    >;

    BridgeSwap(
      from?: null,
      originToken?: null,
      token?: null,
      targetNetwork?: null,
      targetToken?: null,
      targetAddress?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, string, BigNumber],
      {
        from: string;
        originToken: string;
        token: string;
        targetNetwork: BigNumber;
        targetToken: string;
        targetAddress: string;
        amount: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Withdraw(address,address,uint256,uint256)"(
      receiver?: null,
      token?: null,
      amount?: null,
      fee?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { receiver: string; token: string; amount: BigNumber; fee: BigNumber }
    >;

    Withdraw(
      receiver?: null,
      token?: null,
      amount?: null,
      fee?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { receiver: string; token: string; amount: BigNumber; fee: BigNumber }
    >;
  };

  estimateGas: {
    DATA_CHAIN(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_FEE_X10000(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      to: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    feeDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    initializeWithQp(
      _portal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    inventory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidities(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidity(
      token: string,
      liquidityAdder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    portal(overrides?: CallOverrides): Promise<BigNumber>;

    remotePeers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remoteSwap(
      token: string,
      payee: string,
      amount: BigNumberish,
      sourceChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      to: string,
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityIfPossible(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRemotePeers(
      chainIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    routingTable(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoutingTable(
      _routingTable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      to: string,
      token: string,
      targetNetwork: BigNumberish,
      targetToken: string,
      targetAddress: string,
      originToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePortal(
      _portal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRemotePeers(
      chainIds: BigNumberish[],
      remotes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      payee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawItems(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DATA_CHAIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_FEE_X10000(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      to: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeWithQp(
      _portal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    inventory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidities(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidity(
      token: string,
      liquidityAdder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    portal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remotePeers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remoteSwap(
      token: string,
      payee: string,
      amount: BigNumberish,
      sourceChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      to: string,
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityIfPossible(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRemotePeers(
      chainIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    routingTable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoutingTable(
      _routingTable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      to: string,
      token: string,
      targetNetwork: BigNumberish,
      targetToken: string,
      targetAddress: string,
      originToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePortal(
      _portal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRemotePeers(
      chainIds: BigNumberish[],
      remotes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      payee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawItems(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
