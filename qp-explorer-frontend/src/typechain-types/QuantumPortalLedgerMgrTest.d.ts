/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface QuantumPortalLedgerMgrTestInterface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "admin()": FunctionFragment;
    "authorityMgr()": FunctionFragment;
    "calculateBlockHash(uint64,uint64,tuple[])": FunctionFragment;
    "calculateFixedFee(uint256,uint256)": FunctionFragment;
    "feeConvertor()": FunctionFragment;
    "finalize(uint256,uint256,uint256[],bytes32,address[],bytes32,uint64,bytes)": FunctionFragment;
    "fixedFeeTarget()": FunctionFragment;
    "getBlockIdx(uint64,uint64)": FunctionFragment;
    "isLocalBlockReady(uint64)": FunctionFragment;
    "lastRemoteMinedBlock(uint64)": FunctionFragment;
    "ledger()": FunctionFragment;
    "localBlockByNonce(uint64,uint64)": FunctionFragment;
    "mineRemoteBlock(uint64,uint64,tuple[],bytes32,uint64,bytes)": FunctionFragment;
    "minedBlockByNonce(uint64,uint64)": FunctionFragment;
    "minerMgr()": FunctionFragment;
    "minerMinimumStake()": FunctionFragment;
    "owner()": FunctionFragment;
    "realChainId()": FunctionFragment;
    "registerMiner()": FunctionFragment;
    "registerTransaction(uint64,address,address,address,address,uint256,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "stakes()": FunctionFragment;
    "state()": FunctionFragment;
    "submitFraudProof(uint64,uint64,uint64,tuple[],bytes32,uint64,bytes,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAuthorityMgr(address)": FunctionFragment;
    "updateFeeConvertor(address)": FunctionFragment;
    "updateFeeTargets(address,address)": FunctionFragment;
    "updateLedger(address)": FunctionFragment;
    "updateMinerMgr(address)": FunctionFragment;
    "updateMinerMinimumStake(uint256)": FunctionFragment;
    "updateState(address)": FunctionFragment;
    "varFeeTarget()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authorityMgr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBlockHash",
    values: [
      BigNumberish,
      BigNumberish,
      {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFixedFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeConvertor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BytesLike,
      string[],
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedFeeTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockIdx",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLocalBlockReady",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRemoteMinedBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ledger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "localBlockByNonce",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mineRemoteBlock",
    values: [
      BigNumberish,
      BigNumberish,
      {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minedBlockByNonce",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "minerMgr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minerMinimumStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "realChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerMiner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerTransaction",
    values: [
      BigNumberish,
      string,
      string,
      string,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "stakes", values?: undefined): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitFraudProof",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      BytesLike,
      BigNumberish,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAuthorityMgr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeConvertor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeTargets",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLedger",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinerMgr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinerMinimumStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "updateState", values: [string]): string;
  encodeFunctionData(
    functionFragment: "varFeeTarget",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorityMgr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeConvertor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fixedFeeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLocalBlockReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRemoteMinedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "localBlockByNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mineRemoteBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minedBlockByNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minerMgr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minerMinimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "realChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitFraudProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAuthorityMgr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeConvertor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLedger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinerMgr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinerMinimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "varFeeTarget",
    data: BytesLike
  ): Result;

  events: {
    "AdminSet(address)": EventFragment;
    "FinalizedBlock(uint256,uint256,uint256)": EventFragment;
    "FinalizedInvalidBlock(uint256,uint256,uint256)": EventFragment;
    "FinalizedSnapshot(uint256,uint256,uint256,address[])": EventFragment;
    "LocalBlockCreated(uint64,uint64,uint64)": EventFragment;
    "MinedBlockCreated(bytes32,address,uint256,uint256,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoteTransactionRegistered(uint64,address,address,address,address,uint256,bytes,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalizedBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalizedInvalidBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalizedSnapshot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LocalBlockCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinedBlockCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoteTransactionRegistered"
  ): EventFragment;
}

export type AdminSetEvent = TypedEvent<[string] & { admin: string }>;

export type FinalizedBlockEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    remoteChainId: BigNumber;
    blockNonce: BigNumber;
    timestamp: BigNumber;
  }
>;

export type FinalizedInvalidBlockEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    remoteChainId: BigNumber;
    blockNonce: BigNumber;
    timestamp: BigNumber;
  }
>;

export type FinalizedSnapshotEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string[]] & {
    remoteChainId: BigNumber;
    startBlockNonce: BigNumber;
    endBlockNonce: BigNumber;
    finalizers: string[];
  }
>;

export type LocalBlockCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    remoteChainId: BigNumber;
    nonce: BigNumber;
    timestamp: BigNumber;
  }
>;

export type MinedBlockCreatedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber, BigNumber] & {
      chainId: BigNumber;
      nonce: BigNumber;
      timestamp: BigNumber;
    }
  ] & {
    blockHash: string;
    miner: string;
    stake: BigNumber;
    totalValue: BigNumber;
    blockMetadata: [BigNumber, BigNumber, BigNumber] & {
      chainId: BigNumber;
      nonce: BigNumber;
      timestamp: BigNumber;
    };
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RemoteTransactionRegisteredEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    timestamp: BigNumber;
    remoteContract: string;
    sourceMsgSender: string;
    sourceBeneficiary: string;
    token: string;
    amount: BigNumber;
    method: string;
    gas: BigNumber;
    fixedFee: BigNumber;
  }
>;

export class QuantumPortalLedgerMgrTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QuantumPortalLedgerMgrTestInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    authorityMgr(overrides?: CallOverrides): Promise<[string]>;

    calculateBlockHash(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    calculateFixedFee(
      targetChainId: BigNumberish,
      varSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feeConvertor(overrides?: CallOverrides): Promise<[string]>;

    finalize(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      invalidBlockNonces: BigNumberish[],
      finalizersHash: BytesLike,
      finalizers: string[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fixedFeeTarget(overrides?: CallOverrides): Promise<[string]>;

    getBlockIdx(
      chainId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isLocalBlockReady(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastRemoteMinedBlock(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        _block: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      }
    >;

    ledger(overrides?: CallOverrides): Promise<[string]>;

    localBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          }
        ] & {
          metadata: [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          };
        },
        ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string[],
          BigNumber,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          methods: string[];
          gas: BigNumber;
          fixedFee: BigNumber;
        })[]
      ]
    >;

    mineRemoteBlock(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minedBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          number,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          }
        ] & {
          blockHash: string;
          miner: string;
          invalidBlock: number;
          stake: BigNumber;
          totalValue: BigNumber;
          blockMetadata: [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          };
        },
        ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string[],
          BigNumber,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          methods: string[];
          gas: BigNumber;
          fixedFee: BigNumber;
        })[]
      ] & {
        b: [
          string,
          string,
          number,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          }
        ] & {
          blockHash: string;
          miner: string;
          invalidBlock: number;
          stake: BigNumber;
          totalValue: BigNumber;
          blockMetadata: [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          };
        };
        txs: ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string[],
          BigNumber,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          methods: string[];
          gas: BigNumber;
          fixedFee: BigNumber;
        })[];
      }
    >;

    minerMgr(overrides?: CallOverrides): Promise<[string]>;

    minerMinimumStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    realChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerMiner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerTransaction(
      remoteChainId: BigNumberish,
      remoteContract: string,
      msgSender: string,
      beneficiary: string,
      token: string,
      amount: BigNumberish,
      method: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakes(overrides?: CallOverrides): Promise<[string]>;

    state(overrides?: CallOverrides): Promise<[string]>;

    submitFraudProof(
      minedOnChainId: BigNumberish,
      localBlockNonce: BigNumberish,
      localBlockTimestamp: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      rewardReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAuthorityMgr(
      _authorityMgr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeConvertor(
      _feeConvertor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeTargets(
      _varFeeTarget: string,
      _fixedFeeTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLedger(
      _ledger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinerMgr(
      _minerMgr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinerMinimumStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateState(
      _state: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    varFeeTarget(overrides?: CallOverrides): Promise<[string]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  authorityMgr(overrides?: CallOverrides): Promise<string>;

  calculateBlockHash(
    remoteChainId: BigNumberish,
    blockNonce: BigNumberish,
    transactions: {
      timestamp: BigNumberish;
      remoteContract: string;
      sourceMsgSender: string;
      sourceBeneficiary: string;
      token: string;
      amount: BigNumberish;
      methods: BytesLike[];
      gas: BigNumberish;
      fixedFee: BigNumberish;
    }[],
    overrides?: CallOverrides
  ): Promise<string>;

  calculateFixedFee(
    targetChainId: BigNumberish,
    varSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feeConvertor(overrides?: CallOverrides): Promise<string>;

  finalize(
    remoteChainId: BigNumberish,
    blockNonce: BigNumberish,
    invalidBlockNonces: BigNumberish[],
    finalizersHash: BytesLike,
    finalizers: string[],
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fixedFeeTarget(overrides?: CallOverrides): Promise<string>;

  getBlockIdx(
    chainId: BigNumberish,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isLocalBlockReady(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastRemoteMinedBlock(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      chainId: BigNumber;
      nonce: BigNumber;
      timestamp: BigNumber;
    }
  >;

  ledger(overrides?: CallOverrides): Promise<string>;

  localBlockByNonce(
    chainId: BigNumberish,
    blockNonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        metadata: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      },
      ([
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string[],
        BigNumber,
        BigNumber
      ] & {
        timestamp: BigNumber;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumber;
        methods: string[];
        gas: BigNumber;
        fixedFee: BigNumber;
      })[]
    ]
  >;

  mineRemoteBlock(
    remoteChainId: BigNumberish,
    blockNonce: BigNumberish,
    transactions: {
      timestamp: BigNumberish;
      remoteContract: string;
      sourceMsgSender: string;
      sourceBeneficiary: string;
      token: string;
      amount: BigNumberish;
      methods: BytesLike[];
      gas: BigNumberish;
      fixedFee: BigNumberish;
    }[],
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minedBlockByNonce(
    chainId: BigNumberish,
    blockNonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        blockHash: string;
        miner: string;
        invalidBlock: number;
        stake: BigNumber;
        totalValue: BigNumber;
        blockMetadata: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      },
      ([
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string[],
        BigNumber,
        BigNumber
      ] & {
        timestamp: BigNumber;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumber;
        methods: string[];
        gas: BigNumber;
        fixedFee: BigNumber;
      })[]
    ] & {
      b: [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        blockHash: string;
        miner: string;
        invalidBlock: number;
        stake: BigNumber;
        totalValue: BigNumber;
        blockMetadata: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      };
      txs: ([
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string[],
        BigNumber,
        BigNumber
      ] & {
        timestamp: BigNumber;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumber;
        methods: string[];
        gas: BigNumber;
        fixedFee: BigNumber;
      })[];
    }
  >;

  minerMgr(overrides?: CallOverrides): Promise<string>;

  minerMinimumStake(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  realChainId(overrides?: CallOverrides): Promise<BigNumber>;

  registerMiner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerTransaction(
    remoteChainId: BigNumberish,
    remoteContract: string,
    msgSender: string,
    beneficiary: string,
    token: string,
    amount: BigNumberish,
    method: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakes(overrides?: CallOverrides): Promise<string>;

  state(overrides?: CallOverrides): Promise<string>;

  submitFraudProof(
    minedOnChainId: BigNumberish,
    localBlockNonce: BigNumberish,
    localBlockTimestamp: BigNumberish,
    transactions: {
      timestamp: BigNumberish;
      remoteContract: string;
      sourceMsgSender: string;
      sourceBeneficiary: string;
      token: string;
      amount: BigNumberish;
      methods: BytesLike[];
      gas: BigNumberish;
      fixedFee: BigNumberish;
    }[],
    salt: BytesLike,
    expiry: BigNumberish,
    multiSignature: BytesLike,
    rewardReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAuthorityMgr(
    _authorityMgr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeConvertor(
    _feeConvertor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeTargets(
    _varFeeTarget: string,
    _fixedFeeTarget: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLedger(
    _ledger: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinerMgr(
    _minerMgr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinerMinimumStake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateState(
    _state: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  varFeeTarget(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    authorityMgr(overrides?: CallOverrides): Promise<string>;

    calculateBlockHash(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<string>;

    calculateFixedFee(
      targetChainId: BigNumberish,
      varSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeConvertor(overrides?: CallOverrides): Promise<string>;

    finalize(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      invalidBlockNonces: BigNumberish[],
      finalizersHash: BytesLike,
      finalizers: string[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    fixedFeeTarget(overrides?: CallOverrides): Promise<string>;

    getBlockIdx(
      chainId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLocalBlockReady(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastRemoteMinedBlock(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        chainId: BigNumber;
        nonce: BigNumber;
        timestamp: BigNumber;
      }
    >;

    ledger(overrides?: CallOverrides): Promise<string>;

    localBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          }
        ] & {
          metadata: [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          };
        },
        ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string[],
          BigNumber,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          methods: string[];
          gas: BigNumber;
          fixedFee: BigNumber;
        })[]
      ]
    >;

    mineRemoteBlock(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    minedBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          number,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          }
        ] & {
          blockHash: string;
          miner: string;
          invalidBlock: number;
          stake: BigNumber;
          totalValue: BigNumber;
          blockMetadata: [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          };
        },
        ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string[],
          BigNumber,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          methods: string[];
          gas: BigNumber;
          fixedFee: BigNumber;
        })[]
      ] & {
        b: [
          string,
          string,
          number,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          }
        ] & {
          blockHash: string;
          miner: string;
          invalidBlock: number;
          stake: BigNumber;
          totalValue: BigNumber;
          blockMetadata: [BigNumber, BigNumber, BigNumber] & {
            chainId: BigNumber;
            nonce: BigNumber;
            timestamp: BigNumber;
          };
        };
        txs: ([
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          string[],
          BigNumber,
          BigNumber
        ] & {
          timestamp: BigNumber;
          remoteContract: string;
          sourceMsgSender: string;
          sourceBeneficiary: string;
          token: string;
          amount: BigNumber;
          methods: string[];
          gas: BigNumber;
          fixedFee: BigNumber;
        })[];
      }
    >;

    minerMgr(overrides?: CallOverrides): Promise<string>;

    minerMinimumStake(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    realChainId(overrides?: CallOverrides): Promise<BigNumber>;

    registerMiner(overrides?: CallOverrides): Promise<void>;

    registerTransaction(
      remoteChainId: BigNumberish,
      remoteContract: string,
      msgSender: string,
      beneficiary: string,
      token: string,
      amount: BigNumberish,
      method: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    stakes(overrides?: CallOverrides): Promise<string>;

    state(overrides?: CallOverrides): Promise<string>;

    submitFraudProof(
      minedOnChainId: BigNumberish,
      localBlockNonce: BigNumberish,
      localBlockTimestamp: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      rewardReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAuthorityMgr(
      _authorityMgr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeConvertor(
      _feeConvertor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeTargets(
      _varFeeTarget: string,
      _fixedFeeTarget: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLedger(_ledger: string, overrides?: CallOverrides): Promise<void>;

    updateMinerMgr(_minerMgr: string, overrides?: CallOverrides): Promise<void>;

    updateMinerMinimumStake(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateState(_state: string, overrides?: CallOverrides): Promise<void>;

    varFeeTarget(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminSet(address)"(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    AdminSet(admin?: null): TypedEventFilter<[string], { admin: string }>;

    "FinalizedBlock(uint256,uint256,uint256)"(
      remoteChainId?: null,
      blockNonce?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { remoteChainId: BigNumber; blockNonce: BigNumber; timestamp: BigNumber }
    >;

    FinalizedBlock(
      remoteChainId?: null,
      blockNonce?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { remoteChainId: BigNumber; blockNonce: BigNumber; timestamp: BigNumber }
    >;

    "FinalizedInvalidBlock(uint256,uint256,uint256)"(
      remoteChainId?: null,
      blockNonce?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { remoteChainId: BigNumber; blockNonce: BigNumber; timestamp: BigNumber }
    >;

    FinalizedInvalidBlock(
      remoteChainId?: null,
      blockNonce?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { remoteChainId: BigNumber; blockNonce: BigNumber; timestamp: BigNumber }
    >;

    "FinalizedSnapshot(uint256,uint256,uint256,address[])"(
      remoteChainId?: null,
      startBlockNonce?: null,
      endBlockNonce?: null,
      finalizers?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string[]],
      {
        remoteChainId: BigNumber;
        startBlockNonce: BigNumber;
        endBlockNonce: BigNumber;
        finalizers: string[];
      }
    >;

    FinalizedSnapshot(
      remoteChainId?: null,
      startBlockNonce?: null,
      endBlockNonce?: null,
      finalizers?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string[]],
      {
        remoteChainId: BigNumber;
        startBlockNonce: BigNumber;
        endBlockNonce: BigNumber;
        finalizers: string[];
      }
    >;

    "LocalBlockCreated(uint64,uint64,uint64)"(
      remoteChainId?: null,
      nonce?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { remoteChainId: BigNumber; nonce: BigNumber; timestamp: BigNumber }
    >;

    LocalBlockCreated(
      remoteChainId?: null,
      nonce?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { remoteChainId: BigNumber; nonce: BigNumber; timestamp: BigNumber }
    >;

    "MinedBlockCreated(bytes32,address,uint256,uint256,tuple)"(
      blockHash?: null,
      miner?: null,
      stake?: null,
      totalValue?: null,
      blockMetadata?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ],
      {
        blockHash: string;
        miner: string;
        stake: BigNumber;
        totalValue: BigNumber;
        blockMetadata: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      }
    >;

    MinedBlockCreated(
      blockHash?: null,
      miner?: null,
      stake?: null,
      totalValue?: null,
      blockMetadata?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        }
      ],
      {
        blockHash: string;
        miner: string;
        stake: BigNumber;
        totalValue: BigNumber;
        blockMetadata: [BigNumber, BigNumber, BigNumber] & {
          chainId: BigNumber;
          nonce: BigNumber;
          timestamp: BigNumber;
        };
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RemoteTransactionRegistered(uint64,address,address,address,address,uint256,bytes,uint256,uint256)"(
      timestamp?: null,
      remoteContract?: null,
      sourceMsgSender?: null,
      sourceBeneficiary?: null,
      token?: null,
      amount?: null,
      method?: null,
      gas?: null,
      fixedFee?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ],
      {
        timestamp: BigNumber;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumber;
        method: string;
        gas: BigNumber;
        fixedFee: BigNumber;
      }
    >;

    RemoteTransactionRegistered(
      timestamp?: null,
      remoteContract?: null,
      sourceMsgSender?: null,
      sourceBeneficiary?: null,
      token?: null,
      amount?: null,
      method?: null,
      gas?: null,
      fixedFee?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ],
      {
        timestamp: BigNumber;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumber;
        method: string;
        gas: BigNumber;
        fixedFee: BigNumber;
      }
    >;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    authorityMgr(overrides?: CallOverrides): Promise<BigNumber>;

    calculateBlockHash(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateFixedFee(
      targetChainId: BigNumberish,
      varSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeConvertor(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      invalidBlockNonces: BigNumberish[],
      finalizersHash: BytesLike,
      finalizers: string[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fixedFeeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockIdx(
      chainId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLocalBlockReady(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRemoteMinedBlock(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ledger(overrides?: CallOverrides): Promise<BigNumber>;

    localBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mineRemoteBlock(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minedBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minerMgr(overrides?: CallOverrides): Promise<BigNumber>;

    minerMinimumStake(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    realChainId(overrides?: CallOverrides): Promise<BigNumber>;

    registerMiner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerTransaction(
      remoteChainId: BigNumberish,
      remoteContract: string,
      msgSender: string,
      beneficiary: string,
      token: string,
      amount: BigNumberish,
      method: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakes(overrides?: CallOverrides): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    submitFraudProof(
      minedOnChainId: BigNumberish,
      localBlockNonce: BigNumberish,
      localBlockTimestamp: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      rewardReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAuthorityMgr(
      _authorityMgr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeConvertor(
      _feeConvertor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeTargets(
      _varFeeTarget: string,
      _fixedFeeTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLedger(
      _ledger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinerMgr(
      _minerMgr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinerMinimumStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateState(
      _state: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    varFeeTarget(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorityMgr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateBlockHash(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateFixedFee(
      targetChainId: BigNumberish,
      varSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeConvertor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      invalidBlockNonces: BigNumberish[],
      finalizersHash: BytesLike,
      finalizers: string[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fixedFeeTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockIdx(
      chainId: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLocalBlockReady(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRemoteMinedBlock(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ledger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    localBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mineRemoteBlock(
      remoteChainId: BigNumberish,
      blockNonce: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minedBlockByNonce(
      chainId: BigNumberish,
      blockNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minerMgr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minerMinimumStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    realChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerMiner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerTransaction(
      remoteChainId: BigNumberish,
      remoteContract: string,
      msgSender: string,
      beneficiary: string,
      token: string,
      amount: BigNumberish,
      method: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitFraudProof(
      minedOnChainId: BigNumberish,
      localBlockNonce: BigNumberish,
      localBlockTimestamp: BigNumberish,
      transactions: {
        timestamp: BigNumberish;
        remoteContract: string;
        sourceMsgSender: string;
        sourceBeneficiary: string;
        token: string;
        amount: BigNumberish;
        methods: BytesLike[];
        gas: BigNumberish;
        fixedFee: BigNumberish;
      }[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      rewardReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAuthorityMgr(
      _authorityMgr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeConvertor(
      _feeConvertor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeTargets(
      _varFeeTarget: string,
      _fixedFeeTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLedger(
      _ledger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinerMgr(
      _minerMgr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinerMinimumStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateState(
      _state: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    varFeeTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
