/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface QpDependenciesDevInterface extends ethers.utils.Interface {
  functions: {
    "baseToken()": FunctionFragment;
    "collectFee(uint256,uint256,uint256)": FunctionFragment;
    "extractMinerAddress(bytes32,bytes32,uint64,bytes)": FunctionFragment;
    "findMiner(bytes32,uint256)": FunctionFragment;
    "findMinerAtTime(bytes32,uint256,uint256)": FunctionFragment;
    "inventory(address)": FunctionFragment;
    "miningStake()": FunctionFragment;
    "registerMiner(address)": FunctionFragment;
    "registerWork(uint256,address,uint256,uint256)": FunctionFragment;
    "selectMiner(address,bytes32,uint256)": FunctionFragment;
    "setBaseToken(address)": FunctionFragment;
    "slashMinerForFraud(address,bytes32,address)": FunctionFragment;
    "stakeOfDelegate(address)": FunctionFragment;
    "unregister()": FunctionFragment;
    "unregisterMiner(address)": FunctionFragment;
    "validateAuthoritySignature(uint8,bytes32,bytes32,uint64,bytes)": FunctionFragment;
    "verifyMinerSignature(bytes32,bytes32,uint64,bytes,uint256,uint256)": FunctionFragment;
    "withdrawFixedRemote(address,uint256,uint256)": FunctionFragment;
    "withdrawVariableRemote(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extractMinerAddress",
    values: [BytesLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "findMiner",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findMinerAtTime",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "inventory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "miningStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerMiner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerWork",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selectMiner",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "slashMinerForFraud",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOfDelegate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterMiner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateAuthoritySignature",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMinerSignature",
    values: [
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFixedRemote",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVariableRemote",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collectFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extractMinerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "findMiner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findMinerAtTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inventory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "miningStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashMinerForFraud",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeOfDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unregister", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unregisterMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateAuthoritySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMinerSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFixedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVariableRemote",
    data: BytesLike
  ): Result;

  events: {};
}

export class QpDependenciesDev extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QpDependenciesDevInterface;

  functions: {
    baseToken(overrides?: CallOverrides): Promise<[string]>;

    collectFee(
      targetChainId: BigNumberish,
      localEpoch: BigNumberish,
      fixedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extractMinerAddress(
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    findMiner(
      blockHash: BytesLike,
      blockTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    findMinerAtTime(
      blockHash: BytesLike,
      blockTimestamp: BigNumberish,
      chainTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    inventory(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    miningStake(overrides?: CallOverrides): Promise<[string]>;

    registerMiner(
      miner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerWork(
      remoteChain: BigNumberish,
      worker: string,
      work: BigNumberish,
      _remoteEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    selectMiner(
      requestedMiner: string,
      blockHash: BytesLike,
      blockTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseToken(
      _baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashMinerForFraud(
      miner: string,
      blockHash: BytesLike,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeOfDelegate(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unregister(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unregisterMiner(
      miner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateAuthoritySignature(
      action: BigNumberish,
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyMinerSignature(
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike,
      msgValue: BigNumberish,
      minStakeAllowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, string] & { res: number }>;

    withdrawFixedRemote(
      to: string,
      workRatioX128: BigNumberish,
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawVariableRemote(
      to: string,
      workRatioX128: BigNumberish,
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  baseToken(overrides?: CallOverrides): Promise<string>;

  collectFee(
    targetChainId: BigNumberish,
    localEpoch: BigNumberish,
    fixedFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extractMinerAddress(
    msgHash: BytesLike,
    salt: BytesLike,
    expiry: BigNumberish,
    multiSig: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  findMiner(
    blockHash: BytesLike,
    blockTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  findMinerAtTime(
    blockHash: BytesLike,
    blockTimestamp: BigNumberish,
    chainTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  inventory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  miningStake(overrides?: CallOverrides): Promise<string>;

  registerMiner(
    miner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerWork(
    remoteChain: BigNumberish,
    worker: string,
    work: BigNumberish,
    _remoteEpoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  selectMiner(
    requestedMiner: string,
    blockHash: BytesLike,
    blockTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseToken(
    _baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashMinerForFraud(
    miner: string,
    blockHash: BytesLike,
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeOfDelegate(
    operator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unregister(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unregisterMiner(
    miner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateAuthoritySignature(
    action: BigNumberish,
    msgHash: BytesLike,
    salt: BytesLike,
    expiry: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyMinerSignature(
    msgHash: BytesLike,
    salt: BytesLike,
    expiry: BigNumberish,
    signature: BytesLike,
    msgValue: BigNumberish,
    minStakeAllowed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, string] & { res: number }>;

  withdrawFixedRemote(
    to: string,
    workRatioX128: BigNumberish,
    epoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawVariableRemote(
    to: string,
    workRatioX128: BigNumberish,
    epoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    baseToken(overrides?: CallOverrides): Promise<string>;

    collectFee(
      targetChainId: BigNumberish,
      localEpoch: BigNumberish,
      fixedFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extractMinerAddress(
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    findMiner(
      blockHash: BytesLike,
      blockTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    findMinerAtTime(
      blockHash: BytesLike,
      blockTimestamp: BigNumberish,
      chainTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    inventory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    miningStake(overrides?: CallOverrides): Promise<string>;

    registerMiner(miner: string, overrides?: CallOverrides): Promise<void>;

    registerWork(
      remoteChain: BigNumberish,
      worker: string,
      work: BigNumberish,
      _remoteEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    selectMiner(
      requestedMiner: string,
      blockHash: BytesLike,
      blockTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setBaseToken(_baseToken: string, overrides?: CallOverrides): Promise<void>;

    slashMinerForFraud(
      miner: string,
      blockHash: BytesLike,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeOfDelegate(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unregister(overrides?: CallOverrides): Promise<void>;

    unregisterMiner(miner: string, overrides?: CallOverrides): Promise<void>;

    validateAuthoritySignature(
      action: BigNumberish,
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyMinerSignature(
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike,
      msgValue: BigNumberish,
      minStakeAllowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, string] & { res: number }>;

    withdrawFixedRemote(
      to: string,
      workRatioX128: BigNumberish,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawVariableRemote(
      to: string,
      workRatioX128: BigNumberish,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    collectFee(
      targetChainId: BigNumberish,
      localEpoch: BigNumberish,
      fixedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extractMinerAddress(
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findMiner(
      blockHash: BytesLike,
      blockTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findMinerAtTime(
      blockHash: BytesLike,
      blockTimestamp: BigNumberish,
      chainTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inventory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    miningStake(overrides?: CallOverrides): Promise<BigNumber>;

    registerMiner(
      miner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerWork(
      remoteChain: BigNumberish,
      worker: string,
      work: BigNumberish,
      _remoteEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    selectMiner(
      requestedMiner: string,
      blockHash: BytesLike,
      blockTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseToken(
      _baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashMinerForFraud(
      miner: string,
      blockHash: BytesLike,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeOfDelegate(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unregister(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unregisterMiner(
      miner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateAuthoritySignature(
      action: BigNumberish,
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyMinerSignature(
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike,
      msgValue: BigNumberish,
      minStakeAllowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFixedRemote(
      to: string,
      workRatioX128: BigNumberish,
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawVariableRemote(
      to: string,
      workRatioX128: BigNumberish,
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectFee(
      targetChainId: BigNumberish,
      localEpoch: BigNumberish,
      fixedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extractMinerAddress(
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findMiner(
      blockHash: BytesLike,
      blockTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findMinerAtTime(
      blockHash: BytesLike,
      blockTimestamp: BigNumberish,
      chainTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inventory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    miningStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerMiner(
      miner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerWork(
      remoteChain: BigNumberish,
      worker: string,
      work: BigNumberish,
      _remoteEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    selectMiner(
      requestedMiner: string,
      blockHash: BytesLike,
      blockTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseToken(
      _baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashMinerForFraud(
      miner: string,
      blockHash: BytesLike,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeOfDelegate(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unregister(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unregisterMiner(
      miner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateAuthoritySignature(
      action: BigNumberish,
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyMinerSignature(
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike,
      msgValue: BigNumberish,
      minStakeAllowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFixedRemote(
      to: string,
      workRatioX128: BigNumberish,
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawVariableRemote(
      to: string,
      workRatioX128: BigNumberish,
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
