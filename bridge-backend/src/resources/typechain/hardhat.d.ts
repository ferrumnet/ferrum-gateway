/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "BridgePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgePool__factory>;
    getContractFactory(
      name: "BridgePoolV12",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgePoolV12__factory>;
    getContractFactory(
      name: "BridgeRemoteStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeRemoteStaking__factory>;
    getContractFactory(
      name: "BridgeRouterV12",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeRouterV12__factory>;
    getContractFactory(
      name: "IBridgePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgePool__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "FerrumDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FerrumDeployer__factory>;
    getContractFactory(
      name: "IBurnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBurnable__factory>;
    getContractFactory(
      name: "IFerrumDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFerrumDeployer__factory>;
    getContractFactory(
      name: "IVersioned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVersioned__factory>;
    getContractFactory(
      name: "Allocatable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Allocatable__factory>;
    getContractFactory(
      name: "MultiSigCheckable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSigCheckable__factory>;
    getContractFactory(
      name: "SigCheckable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SigCheckable__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "WithAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithAdmin__factory>;
    getContractFactory(
      name: "CrucibleFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrucibleFactory__factory>;
    getContractFactory(
      name: "CruicibleRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CruicibleRouter__factory>;
    getContractFactory(
      name: "CrucibleToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrucibleToken__factory>;
    getContractFactory(
      name: "CrucibleTokenDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrucibleTokenDeployer__factory>;
    getContractFactory(
      name: "ICrucibleFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrucibleFactory__factory>;
    getContractFactory(
      name: "ICrucibleRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrucibleRouter__factory>;
    getContractFactory(
      name: "ICrucibleToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrucibleToken__factory>;
    getContractFactory(
      name: "ICrucibleTokenDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrucibleTokenDeployer__factory>;
    getContractFactory(
      name: "DummyToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyToken__factory>;
    getContractFactory(
      name: "DummyTokenOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyTokenOwnable__factory>;
    getContractFactory(
      name: "Playground",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Playground__factory>;
    getContractFactory(
      name: "IPoolDrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolDrop__factory>;
    getContractFactory(
      name: "PoolDrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolDrop__factory>;
    getContractFactory(
      name: "BaseStakingV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseStakingV2__factory>;
    getContractFactory(
      name: "IStakingFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingFactory__factory>;
    getContractFactory(
      name: "IStakingTokenDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingTokenDeployer__factory>;
    getContractFactory(
      name: "StakingFactoryV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingFactoryV2__factory>;
    getContractFactory(
      name: "StakingTokenDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingTokenDeployer__factory>;
    getContractFactory(
      name: "StakingTokenPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingTokenPool__factory>;
    getContractFactory(
      name: "CommonFerrumInitiator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CommonFerrumInitiator__factory>;
    getContractFactory(
      name: "IRewardPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardPool__factory>;
    getContractFactory(
      name: "IStakeInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeInfo__factory>;
    getContractFactory(
      name: "IStakeTransferrer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeTransferrer__factory>;
    getContractFactory(
      name: "IStakeV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeV2__factory>;
    getContractFactory(
      name: "Admined",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Admined__factory>;
    getContractFactory(
      name: "StakingV2CommonSignatures",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingV2CommonSignatures__factory>;
    getContractFactory(
      name: "IRemoteStake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRemoteStake__factory>;
    getContractFactory(
      name: "RemoteStakeRewardManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RemoteStakeRewardManager__factory>;
    getContractFactory(
      name: "FerrumRouterV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FerrumRouterV2__factory>;
    getContractFactory(
      name: "RouterV2PoolDrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RouterV2PoolDrop__factory>;
    getContractFactory(
      name: "RouterV2Staking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RouterV2Staking__factory>;
    getContractFactory(
      name: "RouterV2SwapDrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RouterV2SwapDrop__factory>;
    getContractFactory(
      name: "StakeTimed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeTimed__factory>;
    getContractFactory(
      name: "ISwapDrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapDrop__factory>;
    getContractFactory(
      name: "SwapDrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapDrop__factory>;
    getContractFactory(
      name: "GeneralTaxDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GeneralTaxDistributor__factory>;
    getContractFactory(
      name: "HasTaxDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HasTaxDistributor__factory>;
    getContractFactory(
      name: "IGeneralTaxDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGeneralTaxDistributor__factory>;
    getContractFactory(
      name: "IHasTaxDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHasTaxDistributor__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
  }
}
