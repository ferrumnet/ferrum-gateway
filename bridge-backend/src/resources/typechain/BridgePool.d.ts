/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BridgePoolInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(address,uint256)": FunctionFragment;
    "addSigner(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "allowTarget(address,uint256,address)": FunctionFragment;
    "allowedTargets(address,uint256)": FunctionFragment;
    "disallowTarget(address,uint256)": FunctionFragment;
    "feeDistributor()": FunctionFragment;
    "fees(address)": FunctionFragment;
    "liquidity(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeLiquidityIfPossible(address,uint256)": FunctionFragment;
    "removeSigner(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setFee(address,uint256)": FunctionFragment;
    "setFeeDistributor(address)": FunctionFragment;
    "signers(address)": FunctionFragment;
    "swap(address,uint256,uint256,address)": FunctionFragment;
    "swapToAddress(address,uint256,uint256,address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usedHashes(bytes32)": FunctionFragment;
    "withdrawSigned(address,address,uint256,bytes32,bytes)": FunctionFragment;
    "withdrawSignedVerify(address,address,uint256,bytes32,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addSigner", values: [string]): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowTarget",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTargets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disallowTarget",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fees", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidity",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityIfPossible",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeDistributor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "signers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToAddress",
    values: [string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usedHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSigned",
    values: [string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSignedVerify",
    values: [string, string, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disallowTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityIfPossible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSignedVerify",
    data: BytesLike
  ): Result;

  events: {
    "AdminSet(address)": EventFragment;
    "BridgeLiquidityAdded(address,address,uint256)": EventFragment;
    "BridgeLiquidityRemoved(address,address,uint256)": EventFragment;
    "BridgeSwap(address,address,uint256,address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TransferBySignature(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeLiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeLiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBySignature"): EventFragment;
}

export class BridgePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgePoolInterface;

  functions: {
    addLiquidity(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allowTarget(
      token: string,
      chainId: BigNumberish,
      targetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowedTargets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    disallowTarget(
      token: string,
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeDistributor(overrides?: CallOverrides): Promise<[string]>;

    fees(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidity(
      token: string,
      liquidityAdder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidityIfPossible(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      token: string,
      fee10000: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    swap(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapToAddress(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    withdrawSigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      salt: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSignedVerify(
      token: string,
      payee: string,
      amount: BigNumberish,
      salt: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string]>;
  };

  addLiquidity(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSigner(
    _signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  allowTarget(
    token: string,
    chainId: BigNumberish,
    targetToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowedTargets(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  disallowTarget(
    token: string,
    chainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeDistributor(overrides?: CallOverrides): Promise<string>;

  fees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  liquidity(
    token: string,
    liquidityAdder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeLiquidityIfPossible(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSigner(
    _signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    token: string,
    fee10000: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeDistributor(
    _feeDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  swap(
    token: string,
    amount: BigNumberish,
    targetNetwork: BigNumberish,
    targetToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapToAddress(
    token: string,
    amount: BigNumberish,
    targetNetwork: BigNumberish,
    targetToken: string,
    targetAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  withdrawSigned(
    token: string,
    payee: string,
    amount: BigNumberish,
    salt: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSignedVerify(
    token: string,
    payee: string,
    amount: BigNumberish,
    salt: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  callStatic: {
    addLiquidity(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addSigner(_signer: string, overrides?: CallOverrides): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    allowTarget(
      token: string,
      chainId: BigNumberish,
      targetToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedTargets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    disallowTarget(
      token: string,
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeDistributor(overrides?: CallOverrides): Promise<string>;

    fees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidity(
      token: string,
      liquidityAdder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeLiquidityIfPossible(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSigner(_signer: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setFee(
      token: string,
      fee10000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    swap(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapToAddress(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      targetAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    withdrawSigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      salt: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawSignedVerify(
      token: string,
      payee: string,
      amount: BigNumberish,
      salt: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string]>;
  };

  filters: {
    AdminSet(admin?: null): TypedEventFilter<[string], { admin: string }>;

    BridgeLiquidityAdded(
      actor?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { actor: string; token: string; amount: BigNumber }
    >;

    BridgeLiquidityRemoved(
      actor?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { actor: string; token: string; amount: BigNumber }
    >;

    BridgeSwap(
      from?: null,
      token?: string | null,
      targetNetwork?: null,
      targetToken?: null,
      targetAddrdess?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, BigNumber],
      {
        from: string;
        token: string;
        targetNetwork: BigNumber;
        targetToken: string;
        targetAddrdess: string;
        amount: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    TransferBySignature(
      signer?: null,
      receiver?: null,
      token?: null,
      amount?: null,
      fee?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        signer: string;
        receiver: string;
        token: string;
        amount: BigNumber;
        fee: BigNumber;
      }
    >;
  };

  estimateGas: {
    addLiquidity(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allowTarget(
      token: string,
      chainId: BigNumberish,
      targetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowedTargets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disallowTarget(
      token: string,
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    fees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidity(
      token: string,
      liquidityAdder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidityIfPossible(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      token: string,
      fee10000: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapToAddress(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawSigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      salt: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSignedVerify(
      token: string,
      payee: string,
      amount: BigNumberish,
      salt: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowTarget(
      token: string,
      chainId: BigNumberish,
      targetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowedTargets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disallowTarget(
      token: string,
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidity(
      token: string,
      liquidityAdder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidityIfPossible(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      token: string,
      fee10000: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapToAddress(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usedHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawSigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      salt: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSignedVerify(
      token: string,
      payee: string,
      amount: BigNumberish,
      salt: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
