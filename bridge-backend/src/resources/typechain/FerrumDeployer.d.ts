/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FerrumDeployerInterface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "computeAddress(bytes32,bytes32,address)": FunctionFragment;
    "computeAddressOwnable(bytes32,address,bytes,bytes32)": FunctionFragment;
    "deploy(bytes32,bytes)": FunctionFragment;
    "deployOwnable(bytes32,address,bytes,bytes)": FunctionFragment;
    "initData()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "computeAddress",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAddressOwnable",
    values: [BytesLike, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployOwnable",
    values: [BytesLike, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "initData", values?: undefined): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAddressOwnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployOwnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initData", data: BytesLike): Result;

  events: {
    "Deployed(address)": EventFragment;
    "DeployedWithData(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployedWithData"): EventFragment;
}

export class FerrumDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FerrumDeployerInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    computeAddress(
      salt: BytesLike,
      bytecodeHash: BytesLike,
      deployer: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    computeAddressOwnable(
      salt: BytesLike,
      owner: string,
      data: BytesLike,
      bytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deploy(
      salt: BytesLike,
      bytecode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployOwnable(
      salt: BytesLike,
      owner: string,
      data: BytesLike,
      bytecode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initData(overrides?: CallOverrides): Promise<[string]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  computeAddress(
    salt: BytesLike,
    bytecodeHash: BytesLike,
    deployer: string,
    overrides?: CallOverrides
  ): Promise<string>;

  computeAddressOwnable(
    salt: BytesLike,
    owner: string,
    data: BytesLike,
    bytecodeHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  deploy(
    salt: BytesLike,
    bytecode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployOwnable(
    salt: BytesLike,
    owner: string,
    data: BytesLike,
    bytecode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initData(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    computeAddress(
      salt: BytesLike,
      bytecodeHash: BytesLike,
      deployer: string,
      overrides?: CallOverrides
    ): Promise<string>;

    computeAddressOwnable(
      salt: BytesLike,
      owner: string,
      data: BytesLike,
      bytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    deploy(
      salt: BytesLike,
      bytecode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    deployOwnable(
      salt: BytesLike,
      owner: string,
      data: BytesLike,
      bytecode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    initData(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Deployed(undefined?: null): TypedEventFilter<[string], { arg0: string }>;

    DeployedWithData(
      conAddr?: null,
      owner?: null
    ): TypedEventFilter<[string, string], { conAddr: string; owner: string }>;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    computeAddress(
      salt: BytesLike,
      bytecodeHash: BytesLike,
      deployer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeAddressOwnable(
      salt: BytesLike,
      owner: string,
      data: BytesLike,
      bytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploy(
      salt: BytesLike,
      bytecode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployOwnable(
      salt: BytesLike,
      owner: string,
      data: BytesLike,
      bytecode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initData(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeAddress(
      salt: BytesLike,
      bytecodeHash: BytesLike,
      deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeAddressOwnable(
      salt: BytesLike,
      owner: string,
      data: BytesLike,
      bytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploy(
      salt: BytesLike,
      bytecode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployOwnable(
      salt: BytesLike,
      owner: string,
      data: BytesLike,
      bytecode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initData(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
