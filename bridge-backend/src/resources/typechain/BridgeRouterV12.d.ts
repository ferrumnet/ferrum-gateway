/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BridgeRouterV12Interface extends ethers.utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "addLiquidity(address,address,uint256)": FunctionFragment;
    "addReward(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pool()": FunctionFragment;
    "removeLiquidity(address,uint256,uint256,address)": FunctionFragment;
    "removeLiquidityIfPossible(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPool(address)": FunctionFragment;
    "setStake(address)": FunctionFragment;
    "stake()": FunctionFragment;
    "swap(address,uint256,uint256,address,address,address)": FunctionFragment;
    "swapAndCross(address,uint256,uint256,address[],uint256,uint256,address,address,address)": FunctionFragment;
    "swapAndCrossETH(address,uint256,address[],uint256,uint256,address,address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawSigned(address,address,uint256,address,uint32,bytes32,bytes)": FunctionFragment;
    "withdrawSignedAndSwap(address,address,uint256,uint32,bytes32,uint256,address[],uint256,bytes)": FunctionFragment;
    "withdrawSignedAndSwapETH(address,address,uint256,uint32,bytes32,uint256,address[],uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityIfPossible",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setPool", values: [string]): string;
  encodeFunctionData(functionFragment: "setStake", values: [string]): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, BigNumberish, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndCross",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string[],
      BigNumberish,
      BigNumberish,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndCrossETH",
    values: [
      string,
      BigNumberish,
      string[],
      BigNumberish,
      BigNumberish,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSigned",
    values: [
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSignedAndSwap",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      string[],
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSignedAndSwapETH",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      string[],
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityIfPossible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapAndCross",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndCrossETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSignedAndSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSignedAndSwapETH",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class BridgeRouterV12 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgeRouterV12Interface;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReward(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidity(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityIfPossible(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStake(
      _stake: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(overrides?: CallOverrides): Promise<[string]>;

    swap(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      swapTargetTokenTo: string,
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapAndCross(
      swapRouter: string,
      amountIn: BigNumberish,
      amountCrossMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      crossTargetNetwork: BigNumberish,
      crossTargetToken: string,
      crossSwapTargetTokenTo: string,
      crossTargetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapAndCrossETH(
      swapRouter: string,
      amountCrossMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      crossTargetNetwork: BigNumberish,
      crossTargetToken: string,
      crossSwapTargetTokenTo: string,
      crossTargetAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      swapToToken: string,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSignedAndSwap(
      to: string,
      swapRouter: string,
      amountIn: BigNumberish,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSignedAndSwapETH(
      to: string,
      swapRouter: string,
      amountIn: BigNumberish,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    to: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReward(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pool(overrides?: CallOverrides): Promise<string>;

  removeLiquidity(
    token: string,
    amount: BigNumberish,
    targetNetwork: BigNumberish,
    targetToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityIfPossible(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPool(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStake(
    _stake: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(overrides?: CallOverrides): Promise<string>;

  swap(
    token: string,
    amount: BigNumberish,
    targetNetwork: BigNumberish,
    targetToken: string,
    swapTargetTokenTo: string,
    targetAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapAndCross(
    swapRouter: string,
    amountIn: BigNumberish,
    amountCrossMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    crossTargetNetwork: BigNumberish,
    crossTargetToken: string,
    crossSwapTargetTokenTo: string,
    crossTargetAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapAndCrossETH(
    swapRouter: string,
    amountCrossMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    crossTargetNetwork: BigNumberish,
    crossTargetToken: string,
    crossSwapTargetTokenTo: string,
    crossTargetAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSigned(
    token: string,
    payee: string,
    amount: BigNumberish,
    swapToToken: string,
    sourceChainId: BigNumberish,
    swapTxId: BytesLike,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSignedAndSwap(
    to: string,
    swapRouter: string,
    amountIn: BigNumberish,
    sourceChainId: BigNumberish,
    swapTxId: BytesLike,
    amountOutMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSignedAndSwapETH(
    to: string,
    swapRouter: string,
    amountIn: BigNumberish,
    sourceChainId: BigNumberish,
    swapTxId: BytesLike,
    amountOutMin: BigNumberish,
    path: string[],
    deadline: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addReward(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityIfPossible(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPool(_pool: string, overrides?: CallOverrides): Promise<void>;

    setStake(_stake: string, overrides?: CallOverrides): Promise<void>;

    stake(overrides?: CallOverrides): Promise<string>;

    swap(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      swapTargetTokenTo: string,
      targetAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndCross(
      swapRouter: string,
      amountIn: BigNumberish,
      amountCrossMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      crossTargetNetwork: BigNumberish,
      crossTargetToken: string,
      crossSwapTargetTokenTo: string,
      crossTargetAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndCrossETH(
      swapRouter: string,
      amountCrossMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      crossTargetNetwork: BigNumberish,
      crossTargetToken: string,
      crossSwapTargetTokenTo: string,
      crossTargetAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawSigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      swapToToken: string,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawSignedAndSwap(
      to: string,
      swapRouter: string,
      amountIn: BigNumberish,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawSignedAndSwapETH(
      to: string,
      swapRouter: string,
      amountIn: BigNumberish,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReward(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityIfPossible(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStake(
      _stake: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      swapTargetTokenTo: string,
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapAndCross(
      swapRouter: string,
      amountIn: BigNumberish,
      amountCrossMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      crossTargetNetwork: BigNumberish,
      crossTargetToken: string,
      crossSwapTargetTokenTo: string,
      crossTargetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapAndCrossETH(
      swapRouter: string,
      amountCrossMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      crossTargetNetwork: BigNumberish,
      crossTargetToken: string,
      crossSwapTargetTokenTo: string,
      crossTargetAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      swapToToken: string,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSignedAndSwap(
      to: string,
      swapRouter: string,
      amountIn: BigNumberish,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSignedAndSwapETH(
      to: string,
      swapRouter: string,
      amountIn: BigNumberish,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      to: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReward(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityIfPossible(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStake(
      _stake: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      token: string,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: string,
      swapTargetTokenTo: string,
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapAndCross(
      swapRouter: string,
      amountIn: BigNumberish,
      amountCrossMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      crossTargetNetwork: BigNumberish,
      crossTargetToken: string,
      crossSwapTargetTokenTo: string,
      crossTargetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapAndCrossETH(
      swapRouter: string,
      amountCrossMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      crossTargetNetwork: BigNumberish,
      crossTargetToken: string,
      crossSwapTargetTokenTo: string,
      crossTargetAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSigned(
      token: string,
      payee: string,
      amount: BigNumberish,
      swapToToken: string,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSignedAndSwap(
      to: string,
      swapRouter: string,
      amountIn: BigNumberish,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSignedAndSwapETH(
      to: string,
      swapRouter: string,
      amountIn: BigNumberish,
      sourceChainId: BigNumberish,
      swapTxId: BytesLike,
      amountOutMin: BigNumberish,
      path: string[],
      deadline: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
