/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BaseStakingV2Interface extends ethers.utils.Interface {
  functions: {
    "addReward(address,address)": FunctionFragment;
    "admins(address,address)": FunctionFragment;
    "baseToken(address)": FunctionFragment;
    "creationSigner()": FunctionFragment;
    "factory()": FunctionFragment;
    "isTokenizable(address)": FunctionFragment;
    "name(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdmin(address,address,uint8)": FunctionFragment;
    "setCreationSigner(address)": FunctionFragment;
    "setTaxDistributor(address)": FunctionFragment;
    "stake(address,address,address)": FunctionFragment;
    "stakeWithAllocation(address,address,address,uint256,bytes32,bytes)": FunctionFragment;
    "stakings(address)": FunctionFragment;
    "sweepBase(address)": FunctionFragment;
    "sweepRewards(address,address[])": FunctionFragment;
    "taxDistributor()": FunctionFragment;
    "transferFrom(address,address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usedHashes(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "admins",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "creationSigner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTokenizable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreationSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeWithAllocation",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "stakings", values: [string]): string;
  encodeFunctionData(functionFragment: "sweepBase", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sweepRewards",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "taxDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usedHashes",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creationSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenizable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCreationSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaxDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeWithAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;

  events: {
    "BasePaid(address,address,address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardAdded(address,address,uint256)": EventFragment;
    "RewardPaid(address,address,address,address[],uint256[])": EventFragment;
    "Staked(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BasePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
}

export class BaseStakingV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BaseStakingV2Interface;

  functions: {
    addReward(
      id: string,
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admins(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    baseToken(id: string, overrides?: CallOverrides): Promise<[string]>;

    creationSigner(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    isTokenizable(id: string, overrides?: CallOverrides): Promise<[boolean]>;

    name(
      id: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _name: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      id: string,
      admin: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreationSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxDistributor(
      _taxDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      payer: string,
      id: string,
      staker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeWithAllocation(
      payer: string,
      id: string,
      staker: string,
      allocation: BigNumberish,
      salt: BytesLike,
      allocatorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        boolean,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ] & {
        stakeType: number;
        restrictedRewards: boolean;
        contribStart: number;
        contribEnd: number;
        endOfLife: number;
        configHardCutOff: number;
        feeRateX10000: number;
        withdrawFeeRateX10000: number;
        flags: number;
      }
    >;

    sweepBase(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepRewards(
      id: string,
      rewardTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taxDistributor(overrides?: CallOverrides): Promise<[string]>;

    transferFrom(
      id: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addReward(
    id: string,
    rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admins(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  baseToken(id: string, overrides?: CallOverrides): Promise<string>;

  creationSigner(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  isTokenizable(id: string, overrides?: CallOverrides): Promise<boolean>;

  name(id: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    id: string,
    admin: string,
    role: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreationSigner(
    _signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxDistributor(
    _taxDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    payer: string,
    id: string,
    staker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeWithAllocation(
    payer: string,
    id: string,
    staker: string,
    allocation: BigNumberish,
    salt: BytesLike,
    allocatorSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakings(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      boolean,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ] & {
      stakeType: number;
      restrictedRewards: boolean;
      contribStart: number;
      contribEnd: number;
      endOfLife: number;
      configHardCutOff: number;
      feeRateX10000: number;
      withdrawFeeRateX10000: number;
      flags: number;
    }
  >;

  sweepBase(
    id: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepRewards(
    id: string,
    rewardTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taxDistributor(overrides?: CallOverrides): Promise<string>;

  transferFrom(
    id: string,
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addReward(
      id: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admins(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;

    baseToken(id: string, overrides?: CallOverrides): Promise<string>;

    creationSigner(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    isTokenizable(id: string, overrides?: CallOverrides): Promise<boolean>;

    name(id: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(
      id: string,
      admin: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreationSigner(
      _signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxDistributor(
      _taxDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      payer: string,
      id: string,
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeWithAllocation(
      payer: string,
      id: string,
      staker: string,
      allocation: BigNumberish,
      salt: BytesLike,
      allocatorSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        boolean,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ] & {
        stakeType: number;
        restrictedRewards: boolean;
        contribStart: number;
        contribEnd: number;
        endOfLife: number;
        configHardCutOff: number;
        feeRateX10000: number;
        withdrawFeeRateX10000: number;
        flags: number;
      }
    >;

    sweepBase(id: string, overrides?: CallOverrides): Promise<void>;

    sweepRewards(
      id: string,
      rewardTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    taxDistributor(overrides?: CallOverrides): Promise<string>;

    transferFrom(
      id: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    BasePaid(
      id?: null,
      staker?: null,
      to?: null,
      token?: null,
      amountPaid?: null,
      fee?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        id: string;
        staker: string;
        to: string;
        token: string;
        amountPaid: BigNumber;
        fee: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RewardAdded(
      id?: null,
      rewardToken?: null,
      rewardAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { id: string; rewardToken: string; rewardAmount: BigNumber }
    >;

    RewardPaid(
      id?: null,
      staker?: null,
      to?: null,
      rewardTokens?: null,
      rewards?: null
    ): TypedEventFilter<
      [string, string, string, string[], BigNumber[]],
      {
        id: string;
        staker: string;
        to: string;
        rewardTokens: string[];
        rewards: BigNumber[];
      }
    >;

    Staked(
      id?: null,
      tokenAddress?: null,
      staker?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { id: string; tokenAddress: string; staker: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addReward(
      id: string,
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admins(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    creationSigner(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    isTokenizable(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      id: string,
      admin: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreationSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxDistributor(
      _taxDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      payer: string,
      id: string,
      staker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeWithAllocation(
      payer: string,
      id: string,
      staker: string,
      allocation: BigNumberish,
      salt: BytesLike,
      allocatorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakings(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    sweepBase(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepRewards(
      id: string,
      rewardTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taxDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      id: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addReward(
      id: string,
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admins(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseToken(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creationSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTokenizable(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(id: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      id: string,
      admin: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreationSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxDistributor(
      _taxDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      payer: string,
      id: string,
      staker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeWithAllocation(
      payer: string,
      id: string,
      staker: string,
      allocation: BigNumberish,
      salt: BytesLike,
      allocatorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sweepBase(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepRewards(
      id: string,
      rewardTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taxDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      id: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usedHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
