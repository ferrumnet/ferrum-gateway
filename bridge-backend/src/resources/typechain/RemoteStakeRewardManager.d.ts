/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RemoteStakeRewardManagerInterface extends ethers.utils.Interface {
  functions: {
    "addMarginalReward(address)": FunctionFragment;
    "addReward(address,address)": FunctionFragment;
    "fakeRewardOf(address,address)": FunctionFragment;
    "fakeRewards(address,address)": FunctionFragment;
    "fakeRewardsTotal(address)": FunctionFragment;
    "reflectionContract()": FunctionFragment;
    "rewardOf(address,address)": FunctionFragment;
    "rewardTokens(address)": FunctionFragment;
    "rewardsTotal(address)": FunctionFragment;
    "router()": FunctionFragment;
    "stakedBalance(address)": FunctionFragment;
    "stakes(address,address)": FunctionFragment;
    "syncStake(address,address)": FunctionFragment;
    "withdrawRewards(address)": FunctionFragment;
    "withdrawRewardsFor(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMarginalReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fakeRewardOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fakeRewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fakeRewardsTotal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reflectionContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsTotal",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakedBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "syncStake",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewardsFor",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMarginalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fakeRewardOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fakeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fakeRewardsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reflectionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "syncStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewardsFor",
    data: BytesLike
  ): Result;

  events: {
    "PaidOut(address,address,address,uint256)": EventFragment;
    "Staked(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PaidOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
}

export class RemoteStakeRewardManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RemoteStakeRewardManagerInterface;

  functions: {
    addMarginalReward(
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReward(
      baseToken: string,
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fakeRewardOf(
      staker: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fakeRewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fakeRewardsTotal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reflectionContract(overrides?: CallOverrides): Promise<[string]>;

    rewardOf(
      staker: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardTokens(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    rewardsTotal(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    stakedBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    syncStake(
      to: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRewards(
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRewardsFor(
      to: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMarginalReward(
    baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReward(
    baseToken: string,
    rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fakeRewardOf(
    staker: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fakeRewards(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fakeRewardsTotal(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  reflectionContract(overrides?: CallOverrides): Promise<string>;

  rewardOf(
    staker: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  rewardsTotal(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  stakedBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  stakes(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  syncStake(
    to: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRewards(
    baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRewardsFor(
    to: string,
    baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMarginalReward(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addReward(
      baseToken: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fakeRewardOf(
      staker: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fakeRewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fakeRewardsTotal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reflectionContract(overrides?: CallOverrides): Promise<string>;

    rewardOf(
      staker: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    rewardsTotal(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    stakedBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    syncStake(
      to: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawRewards(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawRewardsFor(
      to: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    PaidOut(
      token?: null,
      rewardToken?: null,
      staker_?: null,
      rewardAmount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        token: string;
        rewardToken: string;
        staker_: string;
        rewardAmount: BigNumber;
      }
    >;

    Staked(
      token?: null,
      staker_?: null,
      stakedAmount_?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; staker_: string; stakedAmount_: BigNumber }
    >;
  };

  estimateGas: {
    addMarginalReward(
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReward(
      baseToken: string,
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fakeRewardOf(
      staker: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fakeRewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fakeRewardsTotal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reflectionContract(overrides?: CallOverrides): Promise<BigNumber>;

    rewardOf(
      staker: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsTotal(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    stakedBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    syncStake(
      to: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRewards(
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRewardsFor(
      to: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMarginalReward(
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReward(
      baseToken: string,
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fakeRewardOf(
      staker: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fakeRewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fakeRewardsTotal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reflectionContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardOf(
      staker: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsTotal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakedBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    syncStake(
      to: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRewards(
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRewardsFor(
      to: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
