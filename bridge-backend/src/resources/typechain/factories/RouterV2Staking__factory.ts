/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RouterV2Staking,
  RouterV2StakingInterface,
} from "../RouterV2Staking";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "enum Staking.StakeType",
        name: "sType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "rewardToken",
        type: "address",
      },
    ],
    name: "addReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "openEndedStakeContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "staking",
        type: "address",
      },
    ],
    name: "setOpenEndedStakeContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "staking",
        type: "address",
      },
    ],
    name: "setTimedStakeContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "enum Staking.StakeType",
        name: "sType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "enum Staking.StakeType",
        name: "sType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "allocation",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "allocatorSignature",
        type: "bytes",
      },
    ],
    name: "stakeWithAllocation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "timedStakeContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b61128f8061007d6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063af3d905a11610066578063af3d905a14610106578063c10950b014610119578063f2fde38b1461012c578063fb6d7c4f1461013f578063fc428417146101475761009e565b80632f916b7f146100a357806359007d18146100c15780635f44c99c146100e1578063715018a6146100f45780638da5cb5b146100fe575b600080fd5b6100ab61015a565b6040516100b89190610e00565b60405180910390f35b6100d46100cf366004610c4e565b610169565b6040516100b8919061120c565b6100d46100ef366004610d7c565b610334565b6100fc610432565b005b6100ab6104bb565b6100fc610114366004610c16565b6104ca565b6100fc610127366004610c16565b61057a565b6100fc61013a366004610c16565b61062a565b6100ab6106ea565b6100d4610155366004610c9c565b6106f9565b6001546001600160a01b031681565b60006001600160a01b03851661019a5760405162461bcd60e51b8152600401610191906110f8565b60405180910390fd5b6001600160a01b0383166101c05760405162461bcd60e51b815260040161019190611126565b816101dd5760405162461bcd60e51b815260040161019190610fc4565b60006101e8856108c7565b90506000816001600160a01b031663ef3e8828866040518263ffffffff1660e01b81526004016102189190610e00565b602060405180830381600087803b15801561023257600080fd5b505af1158015610246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026a9190610c32565b90506001600160a01b0381166102925760405162461bcd60e51b815260040161019190611099565b6102a76001600160a01b038216338487610a04565b6040516316396e4360e31b81526001600160a01b0383169063b1cb7218906102d7908a9089903390600401610e2e565b602060405180830381600087803b1580156102f157600080fd5b505af1158015610305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103299190610dcc565b979650505050505050565b60006001600160a01b03841661035c5760405162461bcd60e51b8152600401610191906110f8565b6001600160a01b038216600114156103865760405162461bcd60e51b81526004016101919061102b565b6000610391866108c7565b90506103a86001600160a01b038416338387610a04565b60405163205a3f0d60e11b81526001600160a01b038216906340b47e1a906103d69088908790600401610e14565b602060405180830381600087803b1580156103f057600080fd5b505af1158015610404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104289190610dcc565b9695505050505050565b61043a610a62565b6001600160a01b031661044b6104bb565b6001600160a01b0316146104715760405162461bcd60e51b8152600401610191906110c3565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6104d2610a62565b6001600160a01b03166104e36104bb565b6001600160a01b0316146105095760405162461bcd60e51b8152600401610191906110c3565b6001546001600160a01b0316156105325760405162461bcd60e51b81526004016101919061118b565b6001600160a01b0381166105585760405162461bcd60e51b815260040161019190610f0a565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610582610a62565b6001600160a01b03166105936104bb565b6001600160a01b0316146105b95760405162461bcd60e51b8152600401610191906110c3565b6001546001600160a01b0316156105e25760405162461bcd60e51b81526004016101919061118b565b6001600160a01b0381166106085760405162461bcd60e51b815260040161019190610f0a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610632610a62565b6001600160a01b03166106436104bb565b6001600160a01b0316146106695760405162461bcd60e51b8152600401610191906110c3565b6001600160a01b03811661068f5760405162461bcd60e51b815260040161019190610f38565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b60006001600160a01b0389166107215760405162461bcd60e51b8152600401610191906110f8565b6001600160a01b0387166107475760405162461bcd60e51b815260040161019190611126565b856107645760405162461bcd60e51b815260040161019190610fc4565b600061076f896108c7565b90506000816001600160a01b031663ef3e88288a6040518263ffffffff1660e01b815260040161079f9190610e00565b602060405180830381600087803b1580156107b957600080fd5b505af11580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190610c32565b90506001600160a01b0381166108195760405162461bcd60e51b815260040161019190611099565b61082e6001600160a01b03821633848b610a04565b6040516332a3ec9760e21b81526001600160a01b0383169063ca8fb25c90610866908e908d9033908d908d908d908d90600401610e51565b602060405180830381600087803b15801561088057600080fd5b505af1158015610894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b89190610dcc565b9b9a5050505050505050505050565b6000808260048111156108ea57634e487b7160e01b600052602160045260246000fd5b141580156109185750600182600481111561091557634e487b7160e01b600052602160045260246000fd5b14155b6109345760405162461bcd60e51b815260040161019190610ffb565b6000600283600481111561095857634e487b7160e01b600052602160045260246000fd5b14806109835750600483600481111561098157634e487b7160e01b600052602160045260246000fd5b145b6109c75760038360048111156109a957634e487b7160e01b600052602160045260246000fd5b146109b55760006109c2565b6002546001600160a01b03165b6109d4565b6001546001600160a01b03165b90506001600160a01b0381166109fc5760405162461bcd60e51b815260040161019190611062565b90505b919050565b610a5c846323b872dd60e01b858585604051602401610a2593929190610eb3565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610a66565b50505050565b3390565b6000610abb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610afa9092919063ffffffff16565b805190915015610af55780806020019051810190610ad99190610d5c565b610af55760405162461bcd60e51b8152600401610191906111c2565b505050565b6060610b098484600085610b13565b90505b9392505050565b606082471015610b355760405162461bcd60e51b815260040161019190610f7e565b610b3e85610bc8565b610b5a5760405162461bcd60e51b815260040161019190611154565b600080866001600160a01b03168587604051610b769190610de4565b60006040518083038185875af1925050503d8060008114610bb3576040519150601f19603f3d011682016040523d82523d6000602084013e610bb8565b606091505b5091509150610329828286610bce565b3b151590565b60608315610bdd575081610b0c565b825115610bed5782518084602001fd5b8160405162461bcd60e51b81526004016101919190610ed7565b8035600581106109ff57600080fd5b600060208284031215610c27578081fd5b8135610b0c81611241565b600060208284031215610c43578081fd5b8151610b0c81611241565b60008060008060808587031215610c63578283fd5b8435610c6e81611241565b9350610c7c60208601610c07565b92506040850135610c8c81611241565b9396929550929360600135925050565b60008060008060008060008060e0898b031215610cb7578384fd5b8835610cc281611241565b9750610cd060208a01610c07565b96506040890135610ce081611241565b9550606089013594506080890135935060a0890135925060c089013567ffffffffffffffff80821115610d11578384fd5b818b0191508b601f830112610d24578384fd5b813581811115610d32578485fd5b8c6020828501011115610d43578485fd5b6020830194508093505050509295985092959890939650565b600060208284031215610d6d578081fd5b81518015158114610b0c578182fd5b60008060008060808587031215610d91578384fd5b610d9a85610c07565b93506020850135610daa81611241565b9250604085013591506060850135610dc181611241565b939692955090935050565b600060208284031215610ddd578081fd5b5051919050565b60008251610df6818460208701611215565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905260c060a0820181905281018290526000828460e084013781830160e090810191909152601f909201601f191601019695505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082528251806020840152610ef6816040850160208701611215565b601f01601f19169190910160400192915050565b60208082526014908201527314958c94ce881cdd185ad9481c995c5d5a5c995960621b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526018908201527f525632533a20616d6f756e742069732072657175697265640000000000000000604082015260600190565b602080825260169082015275525632533a20426164207374616b696e67207479706560501b604082015260600190565b6020808252601d908201527f525632533a20726577617264546f6b656e206973207265717569726564000000604082015260600190565b6020808252601c908201527f525632533a207374616b656b207474706520697320696e76616c696400000000604082015260600190565b60208082526010908201526f14958c94ce881a5b9d985b1a59081a5960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526014908201527314958c94ce881d1bc81a5cc81c995c5d5a5c995960621b604082015260600190565b60208082526014908201527314958c94ce881a59081a5cc81c995c5d5a5c995960621b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526018908201527f525632533a20616c726561647920636f6e666967757265640000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b90815260200190565b60005b83811015611230578181015183820152602001611218565b83811115610a5c5750506000910152565b6001600160a01b038116811461125657600080fd5b5056fea26469706673582212209ac21607ff4e5cf4a46c74f564fc4d1dcdeeb1942146a88741695441ec15270b64736f6c63430008000033";

export class RouterV2Staking__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RouterV2Staking> {
    return super.deploy(overrides || {}) as Promise<RouterV2Staking>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RouterV2Staking {
    return super.attach(address) as RouterV2Staking;
  }
  connect(signer: Signer): RouterV2Staking__factory {
    return super.connect(signer) as RouterV2Staking__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RouterV2StakingInterface {
    return new utils.Interface(_abi) as RouterV2StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RouterV2Staking {
    return new Contract(address, _abi, signerOrProvider) as RouterV2Staking;
  }
}
