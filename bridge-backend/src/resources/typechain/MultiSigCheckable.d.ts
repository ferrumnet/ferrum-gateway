/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MultiSigCheckableInterface extends ethers.utils.Interface {
  functions: {
    "GOVERNANCE_GROUP_ID()": FunctionFragment;
    "addToQuorum(address,address,uint16,uint16)": FunctionFragment;
    "addToQuorumGovernance(address,address,uint16,uint16,bytes32,bytes)": FunctionFragment;
    "admin()": FunctionFragment;
    "cancelSaltedSignature(bytes32,uint16,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "quorumSubscriptions(address)": FunctionFragment;
    "quorums(address)": FunctionFragment;
    "removeFromQuorum(address)": FunctionFragment;
    "removeFromQuorumGovernance(address,bytes32,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usedHashes(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "GOVERNANCE_GROUP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToQuorum",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToQuorumGovernance",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelSaltedSignature",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quorumSubscriptions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "quorums", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeFromQuorum",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromQuorumGovernance",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usedHashes",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "GOVERNANCE_GROUP_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToQuorumGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelSaltedSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quorums", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromQuorumGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;

  events: {
    "AdminSet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class MultiSigCheckable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MultiSigCheckableInterface;

  functions: {
    GOVERNANCE_GROUP_ID(overrides?: CallOverrides): Promise<[number]>;

    addToQuorum(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToQuorumGovernance(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        id: string;
        groupId: number;
        minSignatures: number;
      }
    >;

    quorums(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        id: string;
        groupId: number;
        minSignatures: number;
      }
    >;

    removeFromQuorum(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFromQuorumGovernance(
      _address: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
  };

  GOVERNANCE_GROUP_ID(overrides?: CallOverrides): Promise<number>;

  addToQuorum(
    _address: string,
    quorumId: string,
    groupId: BigNumberish,
    minSignatures: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToQuorumGovernance(
    _address: string,
    quorumId: string,
    groupId: BigNumberish,
    minSignatures: BigNumberish,
    salt: BytesLike,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  cancelSaltedSignature(
    salt: BytesLike,
    expectedGroupId: BigNumberish,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  quorumSubscriptions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number] & {
      id: string;
      groupId: number;
      minSignatures: number;
    }
  >;

  quorums(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number] & {
      id: string;
      groupId: number;
      minSignatures: number;
    }
  >;

  removeFromQuorum(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFromQuorumGovernance(
    _address: string,
    salt: BytesLike,
    multiSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    GOVERNANCE_GROUP_ID(overrides?: CallOverrides): Promise<number>;

    addToQuorum(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addToQuorumGovernance(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        id: string;
        groupId: number;
        minSignatures: number;
      }
    >;

    quorums(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        id: string;
        groupId: number;
        minSignatures: number;
      }
    >;

    removeFromQuorum(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromQuorumGovernance(
      _address: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    AdminSet(admin?: null): TypedEventFilter<[string], { admin: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    GOVERNANCE_GROUP_ID(overrides?: CallOverrides): Promise<BigNumber>;

    addToQuorum(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToQuorumGovernance(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorums(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeFromQuorum(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFromQuorumGovernance(
      _address: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GOVERNANCE_GROUP_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToQuorum(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToQuorumGovernance(
      _address: string,
      quorumId: string,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelSaltedSignature(
      salt: BytesLike,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorumSubscriptions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorums(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromQuorum(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFromQuorumGovernance(
      _address: string,
      salt: BytesLike,
      multiSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usedHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
